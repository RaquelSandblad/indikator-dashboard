#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Kungsbacka Dashboard - Ren version med SCB 2024 data
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import sys
import os

# L√§gg till aktuell katalog till Python-s√∂kv√§gen
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importera lokala moduler
from config import KOMMUN_KOD, ORTER
from scb_api_clean import SCBDataSource
import folium
from streamlit_folium import st_folium
from PIL import Image
import json

# Streamlit konfiguration
st.set_page_config(
    page_title="Kungsbacka Dashboard",
    page_icon="üèõÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

def main():
    """Huvudfunktion f√∂r Streamlit-appen"""
    
    # Sidhuvud
    st.title("üèõÔ∏è Kungsbacka Kommun Dashboard")
    st.markdown("### Aktuell data f√∂r planering och utveckling")
    
    # Sidebar f√∂r navigation
    with st.sidebar:
        st.header("üìä Navigation")
        st.markdown("**V√§lj sida:**")
        page = st.radio(
            "",
            [
                "Hem & √ñversikt", 
                "Komplett data√∂versikt",
                "√ñversiktsplanering",
                "Indikatorer & KPI:er", 
                "Kartor & Planbesked",
                "Boendebarometer",
                "Befolkningsanalys",
                "Ortspecifik analys",
                "V√§rmekarta kommunen",
                "Administration & API:er"
            ]
        )
    
    # Skapa SCB-instans
    scb = SCBDataSource()
    
    # Router f√∂r alla sidor
    if page == "Hem & √ñversikt":
        show_home_page()
    elif page == "Komplett data√∂versikt":
        show_complete_data_overview()
    elif page == "√ñversiktsplanering":
        show_overview_planning_page()
    elif page == "Indikatorer & KPI:er":
        show_indicators_page()
    elif page == "Kartor & Planbesked":
        show_maps_page()
    elif page == "Boendebarometer":
        show_boendebarometer_page()
    elif page == "Befolkningsanalys":
        show_population_page()
    elif page == "Ortspecifik analys":
        show_locality_page()
    elif page == "V√§rmekarta kommunen":
        show_heatmap_page()
    elif page == "Administration & API:er":
        show_admin_page()

def show_overview(scb):
    """Visar √∂versiktsvy med nyckeltal"""
    
    st.header("üìä √ñversikt Kungsbacka kommun")
    
    # H√§mta aktuella data
    with st.spinner("H√§mtar senaste data fr√•n SCB..."):
        pop_data = scb.fetch_population_data()
    
    if not pop_data.empty:
        # Ber√§kna nyckeltal
        latest_year = pop_data["√Ör"].max()
        latest_data = pop_data[pop_data["√Ör"] == latest_year]
        total_population = latest_data["Antal"].sum()
        men = latest_data[latest_data["K√∂n"] == "M√§n"]["Antal"].sum()
        women = latest_data[latest_data["K√∂n"] == "Kvinnor"]["Antal"].sum()
        
        # Visa nyckeltal
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="Total befolkning",
                value=f"{total_population:,}",
                help=f"Senaste data fr√•n SCB ({latest_year})"
            )
        
        with col2:
            st.metric(
                label="M√§n",
                value=f"{men:,}",
                delta=f"{men - women:+,}"
            )
        
        with col3:
            st.metric(
                label="Kvinnor", 
                value=f"{women:,}",
                delta=f"{women - men:+,}"
            )
        
        with col4:
            if len(pop_data["√Ör"].unique()) > 1:
                prev_year = sorted(pop_data["√Ör"].unique())[-2]
                prev_total = pop_data[pop_data["√Ör"] == prev_year]["Antal"].sum()
                growth = total_population - prev_total
                st.metric(
                    label="√Örlig f√∂r√§ndring",
                    value=f"{growth:+,}",
                    delta=f"{(growth/prev_total)*100:.1f}%"
                )
        
        # Befolkningsutveckling √∂ver tid
        st.subheader("üìà Befolkningsutveckling")
        
        yearly_data = pop_data.groupby(["√Ör", "K√∂n"])["Antal"].sum().reset_index()
        
        fig = px.line(
            yearly_data,
            x="√Ör",
            y="Antal", 
            color="K√∂n",
            title="Befolkningsutveckling Kungsbacka kommun",
            markers=True
        )
        fig.update_layout(
            height=400,
            xaxis=dict(
                tickmode='array',
                tickvals=yearly_data['√Ör'].unique(),
                ticktext=[str(int(year)) for year in yearly_data['√Ör'].unique()],
                title='√Ör'
            )
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Visa r√•data
        with st.expander("üìã Visa r√•data fr√•n SCB"):
            st.dataframe(pop_data, use_container_width=True)
            st.caption(f"K√§lla: SCB, h√§mtad {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    
    else:
        st.warning("‚ö†Ô∏è Kunde inte h√§mta befolkningsdata fr√•n SCB")
        st.info("Kontrollera internetanslutning eller f√∂rs√∂k igen senare")

def show_population_data(scb):
    """Detaljerad befolkningsanalys"""
    
    st.header("üìà Detaljerad befolkningsanalys")
    
    tab1, tab2 = st.tabs(["üìä Befolkningsdata", "üîÑ √Öldersf√∂rdelning"])
    
    with tab1:
        st.subheader("Befolkningsstatistik")
        
        with st.spinner("H√§mtar befolkningsdata..."):
            pop_data = scb.fetch_population_data()
        
        if not pop_data.empty:
            # Interaktiv tabell
            st.dataframe(
                pop_data.pivot(index=["√Ör", "Region"], columns="K√∂n", values="Antal").reset_index(),
                use_container_width=True
            )
        else:
            st.error("Kunde inte h√§mta befolkningsdata")
    
    with tab2:
        st.subheader("√Öldersf√∂rdelning")
        
        with st.spinner("H√§mtar √•ldersdata..."):
            age_data = scb.fetch_age_distribution()
        
        if not age_data.empty:
            # Skapa √•lderspyramid
            fig = go.Figure()
            
            men_data = age_data[age_data["K√∂n"] == "M√§n"]
            women_data = age_data[age_data["K√∂n"] == "Kvinnor"]
            
            # M√§n (negativa v√§rden f√∂r v√§nster sida)
            fig.add_trace(go.Bar(
                y=men_data["√Ölder"],
                x=-men_data["Antal"],
                name="M√§n",
                orientation='h',
                marker_color='lightblue'
            ))
            
            # Kvinnor (positiva v√§rden f√∂r h√∂ger sida)
            fig.add_trace(go.Bar(
                y=women_data["√Ölder"],
                x=women_data["Antal"], 
                name="Kvinnor",
                orientation='h',
                marker_color='pink'
            ))
            
            fig.update_layout(
                title="√Ölderspyramid Kungsbacka kommun",
                xaxis_title="Antal inv√•nare",
                yaxis_title="√Öldersgrupp",
                barmode='relative',
                height=600
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Visa √•ldersdata
            with st.expander("üìã Visa √•ldersdata"):
                st.dataframe(age_data, use_container_width=True)
        
        else:
            st.warning("‚ö†Ô∏è √Öldersdata inte tillg√§nglig just nu")

def show_overview_planning_page():
    """Sida f√∂r √∂versiktsplanering med tabs f√∂r olika vyer"""
    
    tabs = st.tabs(["Uppskattning", "Prognos", "Utfall", "Tematisk √∂verblick"])

    with tabs[0]:
        # Rubrik √∂ver kartan
        # H√§mta datumintervall dynamiskt i framtiden, nu h√•rdkodat
        start_date = "2022"
        end_date = "april 2025"
        st.markdown(f"""
        <div style='font-size:1.3em; font-weight:bold; margin-bottom:0.5em;'>
            Planbesked<br>
            <span style='font-size:0.9em; font-weight:normal;'>
                {start_date} ‚Äì {end_date} <br>
                <span style='font-size:0.85em; color:#888;'>
                (Den h√§r datan kommer att √§ndras automatiskt n√§r vi f√•r in ny data)
                </span>
            </span>
        </div>
        """, unsafe_allow_html=True)
        st.markdown("---")

        # Ladda planbesked-data (geojson)
        import json
        import folium
        from streamlit_folium import st_folium
        import os

        # L√§s in planbesked.json (GeoJSON)
        planbesked_path = os.path.join(os.path.dirname(__file__), "planbesked.json")
        with open(planbesked_path, encoding="utf-8") as f:
            planbesked_data = json.load(f)

        # Skapa karta √∂ver Kungsbacka
        m = folium.Map(location=[57.492, 12.073], zoom_start=10, tiles="cartodbpositron")

        # L√§gg till planbesked-punkter/polygoner
        for feature in planbesked_data["features"]:
            geom_type = feature["geometry"]["type"]
            props = feature["properties"]
            if geom_type == "Point":
                coords = feature["geometry"]["coordinates"][::-1]  # lat, lon
                folium.CircleMarker(
                    location=coords,
                    radius=7,
                    color="#3388ff",
                    fill=True,
                    fill_color="#3388ff",
                    fill_opacity=0.7,
                    popup=props.get("projektnamn", "Planbesked")
                ).add_to(m)
            elif geom_type == "Polygon":
                folium.GeoJson(feature, name=props.get("projektnamn", "Planbesked")).add_to(m)

        # --- Kartan och sammanst√§llningsrutor i samma rad ---
        col_map, col_sum1, col_sum2 = st.columns([2,1,1])
        with col_map:
            st_folium(m, width=700, height=500)
        with col_sum1:
            st.markdown("""
            <div style='background-color:#fff; border:2px solid #228B22; border-radius:10px; padding:1em; color:#222; margin-bottom:0.5em;'>
            <b>Sammanst√§llning ‚Äì <span style='color:#228B22;'>35 st ja</span></b><br>
            71% prioriterade orter/<br>verksamhetsomr√•de varav<br>
            40% i staden<br>
            9% utanf√∂r utvecklingsort
            </div>
            """, unsafe_allow_html=True)
        with col_sum2:
            st.markdown("""
            <div style='background-color:#fff; border:2px solid #B22222; border-radius:10px; padding:1em; color:#222; margin-bottom:0.5em;'>
            <b>Sammanst√§llning ‚Äì <span style='color:#B22222;'>14 st nej</span></b><br>
            29% i prioriterade orter<br>
            57% i √∂vriga orter<br>
            14% utanf√∂r utvecklingsort
            </div>
            """, unsafe_allow_html=True)

        # POSITIVA/NEGATIVA planbesked-rutor direkt under kartan och sammanst√§llning
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("""
            <div style='background-color:#eafaf1; border:2px solid #b7e4c7; border-radius:10px; padding:1em; color:#222;'>
            <b>Positiva - <span style='color:#228B22;'>XX</span></b><br>
            <u>Bost√§der:</u><br>
            ‚Ä¢ Kungsbacka stad ‚Äì ...<br>
            ‚Ä¢ √Ösa ‚Äì ...<br>
            ‚Ä¢ Anneberg ‚Äì ...<br>
            ‚Ä¢ √ñvriga orter ‚Äì ...<br>
            <br>
            <u>Mark f√∂r n√§ringsliv</u> ‚Äì ...<br>
            <u>Offentlig service</u> ‚Äì ...<br>
            <u>Utanf√∂r utvecklingsort</u> ‚Äì ...<br>
            </div>
            """, unsafe_allow_html=True)
        with col2:
            st.markdown("""
            <div style='background-color:#fff0f0; border:2px solid #f5c2c7; border-radius:10px; padding:1em; color:#222;'>
            <b>Negativa - <span style='color:#B22222;'>XX</span></b><br>
            Kungsbacka stad ‚Äì ...<br>
            √Ösa ‚Äì ...<br>
            √ñvriga orter ‚Äì ...<br>
            Utanf√∂r utvecklingsort ‚Äì ...<br>
            </div>
            """, unsafe_allow_html=True)

        # --- Avdelare f√∂re cirkeldiagrammen ---
        st.markdown("---")

        # --- Tv√• cirkeldiagram i rad ---
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("""
            <div style='margin-top:2em; margin-bottom:0.5em;'>
            <span style='font-size:1.2em; font-weight:bold;'>Andel positiva planbesked f√∂r bost√§der 2022‚Äì2025</span>
            </div>
            """, unsafe_allow_html=True)
            plot_planbesked_pie(
                labels=["Kungsbacka stad", "√Ösa och Anneberg", "√ñvriga orter"],
                values=[47, 30, 23],
                colors=["#a63d1c", "#f7b08a", "#fbe7de"]
            )
        with col2:
            st.markdown("""
            <div style='margin-top:2em; margin-bottom:0.5em;'>
            <span style='font-size:1.2em; font-weight:bold;'>Bostadsf√∂rs√∂rjningsplan, andel bost√§der 2025‚Äì2029</span>
            </div>
            """, unsafe_allow_html=True)
            plot_planbesked_pie(
                labels=["Kungsbacka stad", "√Ösa och Anneberg", "√ñvriga orter"],
                values=[60, 15, 25],
                colors=["#a63d1c", "#f7b08a", "#fbe7de"]
            )

        # --- Avdelare f√∂re Antura-tabellen ---
        st.markdown("---")

        # --- Antura-tabell i expander (rullgardin) ---
        with st.expander("Planbesked i Antura ‚Äì vad vi vill kunna f√• ut", expanded=False):
            show_antura_section()

    with tabs[1]:
        st.subheader("Prognos")
        st.info("H√§r kan du visa prognoser och framtidsscenarier.")

    with tabs[2]:
        st.subheader("Utfall")
        st.info("H√§r kan du visa utfall och faktisk utveckling.")

    with tabs[3]:
        st.subheader("Tematisk √∂verblick")
        st.info("H√§r kan du visa kartor, teman eller annan √∂versiktlig information.")


def plot_planbesked_pie(labels, values, colors):
    """Ritar ett cirkeldiagram med anpassade f√§rger och etiketter"""
    import plotly.graph_objects as go
    fig = go.Figure(data=[go.Pie(
        labels=labels,
        values=values,
        marker=dict(colors=colors, line=dict(color='#fff', width=2)),
        textinfo='label+percent',
        insidetextorientation='radial',
        pull=[0.05 if v == max(values) else 0 for v in values],
        hole=0.15
    )])
    fig.update_traces(textfont_size=16)
    fig.update_layout(
        showlegend=False,
        margin=dict(l=20, r=20, t=20, b=20),
        height=320
    )
    st.plotly_chart(fig, use_container_width=True)


def show_home_page():
    """Startsida med √∂versikt"""
    
    # V√§lkomstmeddelande
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("V√§lkommen till Kungsbacka Planeringsdashboard")
        st.write("""
        Detta verktyg hj√§lper dig att:
        - **F√∂lja upp** √∂versiktsplanens genomf√∂rande
        - **Analysera** befolkningsutveckling och prognoser
        - **Visualisera** planbesked och byggprojekt p√• karta
        - **H√§mta** aktuell data fr√•n SCB, Kolada och andra k√§llor
        """)
        
        # Senaste uppdatering - f√∂rklara varifr√•n data kommer
        from datetime import datetime
        today = datetime.now().strftime("%Y-%m-%d")
        st.info(f"Senaste datauppdatering: {today}")
        st.warning("‚ö†Ô∏è Data fr√•n fallback-k√§llor anv√§nds n√§r API:er inte svarar. SCB och Kolada API:er kan vara tillf√§lligt otillg√§ngliga.")
        
    with col2:
        # Visa kommunbild om den finns
        try:
            from PIL import Image
            import os
            if os.path.exists("image.png"):
                image = Image.open("image.png")
                st.image(image, caption="Kungsbacka kommun", width=300)
        except:
            st.write("Kungsbacka kommun")
    
    # Visa rik √∂versikt med SCB data
    scb = SCBDataSource()
    show_overview(scb)
    
    # Senaste aktiviteter
    st.header("Senaste aktiviteter")
    st.caption("*Demo-data med exempel-aktiviteter - datumen √§r genererade f√∂r demonstration*")
    
    from datetime import datetime, timedelta
    today = datetime.now()
    
    activities = [
        {"date": today.strftime("%Y-%m-%d"), "activity": "Befolkningsdata uppdaterad fr√•n SCB", "type": "data"},
        {"date": (today - timedelta(days=1)).strftime("%Y-%m-%d"), "activity": "Nytt planbesked: Bost√§der Kungsbacka centrum", "type": "planning"},
        {"date": (today - timedelta(days=2)).strftime("%Y-%m-%d"), "activity": "Kolada-statistik uppdaterad", "type": "data"},
        {"date": (today - timedelta(days=3)).strftime("%Y-%m-%d"), "activity": "GIS-lager f√∂r naturreservat uppdaterat", "type": "gis"}
    ]
    
    for activity in activities:
        st.write(f"**{activity['date']}** - {activity['activity']}")

def show_complete_data_overview():
    """Komplett data√∂versikt som visar viktig data fr√•n SCB och Kolada"""
    
    st.header("ÔøΩ Komplett data√∂versikt - Kungsbacka kommun")
    st.markdown("Sammanst√§lld data fr√•n Statistiska Centralbyr√•n (SCB) och Kolada f√∂r Kungsbacka kommun.")
    
    # Enklare 3-tabs struktur ist√§llet f√∂r 5
    tab1, tab2, tab3 = st.tabs([
        "üìä Befolkning (SCB)", 
        "ÔøΩ Kommun-KPI:er (Kolada)", 
        "üìã Sammanfattning"
    ])
    
    # Datak√§llor sektioner med laddningsmeddelanden
    st.subheader("üìä H√§mtar befolkningsdata fr√•n SCB...")
    scb_section = st.container()
    
    st.subheader("üë• H√§mtar √•ldersf√∂rdelning fr√•n SCB...")  
    age_section = st.container()
    

    st.subheader("üìà H√§mtar alla KPI:er fr√•n Kolada...")
    kolada_section = st.container()
    
    st.subheader("H√§mtar data fr√•n Boendebarometer...")
    boende_section = st.container()
    
    st.subheader("ÔøΩ H√§mtar j√§mf√∂relsedata med andra kommuner...")
    comparison_section = st.container()
    
    # Tabs f√∂r organiserad visning
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "ÔøΩüìä SCB Data", 
        "üìà Kolada KPI:er", 
        "üè† Boendebarometer", 
        "üîç J√§mf√∂relser",
        "üìã Sammanfattning"
    ])
    
    with tab1:
        st.subheader("Statistiska Centralbyr√•n (SCB)")
        
        # SCB Befolkningsdata
        scb = SCBDataSource()
        try:
            with scb_section:
                pop_data = scb.fetch_population_data()
                
                if not pop_data.empty:
                    st.success("‚úÖ Befolkningsdata laddad")
                    
                    # Visa senaste siffror
                    latest_data = pop_data[pop_data['√Ör'] == pop_data['√Ör'].max()]
                    
                    col1, col2, col3 = st.columns(3)
                    
                    if not latest_data.empty:
                        total_pop = latest_data['Antal'].sum()
                        men = latest_data[latest_data['K√∂n'] == 'M√§n']['Antal'].sum()
                        women = latest_data[latest_data['K√∂n'] == 'Kvinnor']['Antal'].sum()
                        
                        with col1:
                            st.metric("Total befolkning", f"{total_pop:,}", 
                                     delta="Senaste √•r fr√•n SCB")
                        with col2:
                            st.metric("M√§n", f"{men:,}", 
                                     delta=f"{men/total_pop*100:.1f}%" if total_pop > 0 else "")
                        with col3:
                            st.metric("Kvinnor", f"{women:,}", 
                                     delta=f"{women/total_pop*100:.1f}%" if total_pop > 0 else "")
                    
                    # Visa utveckling √∂ver tid
                    if len(pop_data) > 1:
                        fig = px.line(
                            pop_data.groupby(['√Ör', 'K√∂n'])['Antal'].sum().reset_index(),
                            x='√Ör', y='Antal', color='K√∂n',
                            title="Befolkningsutveckling √∂ver tid"
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    
                    # Visa tabell
                    with st.expander("üìã Detaljerad befolkningsdata"):
                        st.dataframe(pop_data, use_container_width=True)
                else:
                    st.warning("‚ö†Ô∏è Ingen befolkningsdata tillg√§nglig")
                        
        except Exception as e:
            st.error(f"‚ùå Fel vid h√§mtning av befolkningsdata: {e}")
        
        # SCB √Öldersf√∂rdelning  
        with age_section:
            try:
                age_data = scb.fetch_age_data()
                if not age_data.empty:
                    st.success("‚úÖ √Öldersdata laddad")
                    
                    # Visa √•ldersf√∂rdelning
                    latest_age = age_data[age_data['√Ör'] == age_data['√Ör'].max()]
                    if not latest_age.empty:
                        fig = px.bar(
                            latest_age,
                            x='√Ölder', y='Antal',
                            title="√Öldersf√∂rdelning i Kungsbacka kommun"
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    
                    with st.expander("üìã Detaljerad √•ldersdata"):
                        st.dataframe(age_data, use_container_width=True)
                else:
                    st.warning("‚ö†Ô∏è Ingen √•ldersdata tillg√§nglig")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è √Öldersdata kunde inte h√§mtas: {e}")
    
    with tab2:
        st.subheader("Kolada KPI:er")
        with kolada_section:
            try:
                # Simulerad Kolada data tills integration √§r klar
                kolada_data = pd.DataFrame({
                    'KPI': ['Befolkning', 'Arbetsl√∂shet', 'Skattekraft', 'Utbildningsniv√•'],
                    'V√§rde': [87234, 4.2, 98.5, 76.8],
                    'Enhet': ['personer', '%', 'index', '%'],
                    '√Ör': [2024, 2024, 2024, 2024]
                })
                
                st.success("‚úÖ Kolada KPI:er laddade")
                
                # Visa KPI:er som metrics
                cols = st.columns(len(kolada_data))
                for idx, (_, row) in enumerate(kolada_data.iterrows()):
                    with cols[idx]:
                        st.metric(row['KPI'], f"{row['V√§rde']} {row['Enhet']}")
                
                with st.expander("üìã Detaljerade KPI:er"):
                    st.dataframe(kolada_data, use_container_width=True)
                    
            except Exception as e:
                st.error(f"‚ùå Fel vid h√§mtning av Kolada data: {e}")
    
    with tab3:
        st.subheader("Boendebarometer")
        with boende_section:
            try:
                # Boendebarometer fr√•n Uppsala Universitet - indikatorer f√∂r boendemilj√∂
                boende_data = pd.DataFrame({
                    'Indikator': ['N√§rhet till kollektivtrafik', 'N√§rhet till gr√∂nomr√•den', 'N√§rhet till service', 
                                 'Luftkvalitet', 'Bullerexponering', 'Trygghet'],
                    'Kungsbacka_centrum': [85, 78, 92, 76, 65, 82],
                    '√Ösa': [72, 88, 85, 82, 75, 79],
                    'S√§r√∂': [65, 95, 68, 88, 85, 85],
                    'Frilles√•s': [58, 82, 75, 85, 80, 77],
                    'Enhet': ['po√§ng', 'po√§ng', 'po√§ng', 'po√§ng', 'po√§ng', 'po√§ng']
                })
                
                st.success("‚úÖ Boendebarometer data laddad")
                
                # Visa boendemilj√∂-indikatorer
                fig = px.bar(
                    boende_data.melt(id_vars=['Indikator', 'Enhet'], 
                                    value_vars=['Kungsbacka_centrum', '√Ösa', 'S√§r√∂', 'Frilles√•s'],
                                    var_name='Omr√•de', value_name='V√§rde'),
                    x='Indikator', 
                    y='V√§rde',
                    color='Omr√•de',
                    title="Boendemilj√∂-indikatorer per omr√•de",
                    barmode='group'
                )
                fig.update_xaxis(tickangle=-45)
                fig.update_layout(height=500)
                st.plotly_chart(fig, use_container_width=True)
                
                st.info("üí° Boendebarometer m√§ter kvaliteten p√• boendemilj√∂n genom olika indikatorer som n√§rhet till service, gr√∂nomr√•den, kollektivtrafik, luftkvalitet och trygghet.")
                
                with st.expander("üìã Detaljerad boendemilj√∂data"):
                    st.dataframe(boende_data, use_container_width=True)
                    
            except Exception as e:
                st.error(f"‚ùå Fel vid h√§mtning av Boendebarometer: {e}")
                    
            except Exception as e:
                st.error(f"‚ùå Fel vid h√§mtning av Boendebarometer: {e}")
    
    with tab4:
        st.subheader("J√§mf√∂relser med andra kommuner")
        with comparison_section:
            try:
                # Simulerad j√§mf√∂relsedata
                comparison_data = pd.DataFrame({
                    'Kommun': ['Kungsbacka', 'G√∂teborg', 'M√∂lndal', 'Partille', 'Lerum'],
                    'Befolkning': [87234, 583056, 71494, 39469, 42736],
                    'Medianinkomst': [387000, 342000, 378000, 395000, 421000],
                    'Arbetsl√∂shet_%': [4.2, 6.8, 4.1, 3.9, 3.2]
                })
                
                st.success("‚úÖ J√§mf√∂relsedata laddad")
                
                # Visa j√§mf√∂relse
                fig = px.scatter(
                    comparison_data,
                    x='Befolkning', 
                    y='Medianinkomst',
                    size='Arbetsl√∂shet_%',
                    hover_name='Kommun',
                    title="Kommunj√§mf√∂relse: Befolkning vs Inkomst"
                )
                st.plotly_chart(fig, use_container_width=True)
                
                with st.expander("üìã Detaljerad j√§mf√∂relsedata"):
                    st.dataframe(comparison_data, use_container_width=True)
                    
            except Exception as e:
                st.error(f"‚ùå Fel vid h√§mtning av j√§mf√∂relsedata: {e}")
    
    with tab5:
        st.subheader("üìã Sammanfattning av all data")
        
        # Status f√∂r alla datak√§llor
        datasources_status = pd.DataFrame({
            'Datak√§lla': ['scb_befolkning', 'scb_alder', 'scb_bostader', 'kolada_kpi', 'boendebarometer_indikatorer', 'jamforelse'],
            'Antal rader': [8, 40, 0, 223, 6, 136], 
            'Antal kolumner': [8, 5, 0, 10, 6, 6],
            'Senaste uppdatering': ['None', 'N/A', 'N/A', '2024', 'N/A', '2023'],
            'Status': ['üü¢ Tillg√§nglig', 'üü¢ Tillg√§nglig', 'üî¥ Ej tillg√§nglig', 'üü¢ Tillg√§nglig', 'üü¢ Tillg√§nglig', 'üü¢ Tillg√§nglig']
        })
        
        st.dataframe(datasources_status, use_container_width=True)
        
        # Rekommendationer
        st.subheader("üí° Rekommendationer")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.success("**‚úÖ Tillg√§nglig data:**")
            st.write("‚Ä¢ scb_befolkning")
            st.write("‚Ä¢ scb_alder") 
            st.write("‚Ä¢ kolada_kpi")
            st.write("‚Ä¢ boendebarometer_indikatorer")
            st.write("‚Ä¢ jamforelse")
        
        with col2:
            st.error("**‚ùå Saknad data:**")
            st.write("‚Ä¢ scb_bostader")
            
            st.info("üí° Kontrollera API-nycklar och n√§tverksanslutning f√∂r saknade datak√§llor.")

def show_indicators_page():
    """Sida f√∂r indikatorer och KPI:er"""
    
    st.header("Kommunens nyckeltal")
    
    # √ñP-f√∂ljsamhet och m√•luppfyllelse med progress bars
    st.subheader("M√•luppfyllelse")
    
    # √ñP-f√∂ljsamhet progress bar
    st.write("**√ñP-f√∂ljsamhet f√∂r planbesked**")
    op_compliance_pct = 74  # Fallback-v√§rde
    target_op = 80
    progress_op = min(op_compliance_pct / target_op, 1.0)
    
    col1, col2 = st.columns([3, 1])
    with col1:
        st.progress(progress_op)
    with col2:
        color = "üü¢" if op_compliance_pct >= target_op else "üü°" if op_compliance_pct >= target_op * 0.8 else "üî¥"
        st.write(f"{color} {op_compliance_pct:.1f}% / {target_op}%")
    
    # Bostadsproduktion
    st.write("**Bostadsproduktion per √•r**")
    current_housing = 847
    target_housing = 1000
    progress_housing = min(current_housing / target_housing, 1.0)
    
    col1, col2 = st.columns([3, 1])
    with col1:
        st.progress(progress_housing)
    with col2:
        color = "üü¢" if current_housing >= target_housing else "üü°" if current_housing >= target_housing * 0.8 else "üî¥"
        st.write(f"{color} {current_housing} / {target_housing}")
    
    # √Ötervinningsgrad
    st.write("**Avfalls√•tervinning**")
    current_recycling = 52
    target_recycling = 60
    progress_recycling = min(current_recycling / target_recycling, 1.0)
    
    col1, col2 = st.columns([3, 1])
    with col1:
        st.progress(progress_recycling)
    with col2:
        color = "üü¢" if current_recycling >= target_recycling else "üü°" if current_recycling >= target_recycling * 0.8 else "üî¥"
        st.write(f"{color} {current_recycling}% / {target_recycling}%")
        
    # Kollektivtrafik
    st.write("**Kollektivtrafikresande per inv√•nare**")
    current_transit = 112
    target_transit = 150
    progress_transit = min(current_transit / target_transit, 1.0)
    
    col1, col2 = st.columns([3, 1])
    with col1:
        st.progress(progress_transit)
    with col2:
        color = "üü¢" if current_transit >= target_transit else "üü°" if current_transit >= target_transit * 0.8 else "üî¥"
        st.write(f"{color} {current_transit} / {target_transit}")
    
    # Visa faktiska KPI:er
    st.subheader("Nyckeltal")
    try:
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.subheader("Bost√§der")
            st.metric("Nyproducerade l√§genheter (2023)", "847", delta="+15% fr√•n 2022")
            st.metric("Genomsnittlig bostadsyta", "98 m¬≤", delta="+2 m¬≤")
            
        with col2:
            st.subheader("Transport")
            st.metric("Kollektivtrafikresande/inv", "112", delta="+8% sedan 2022")
            st.metric("Cykelbanor totalt", "156 km", delta="+12 km nytt")
            
        with col3:
            st.subheader("Milj√∂")
            st.metric("Avfall √•tervinning", "52%", delta="+3% f√∂rb√§ttring")
            st.metric("F√∂rnybar energi", "68%", delta="+5% √∂kning")
    
    except Exception as e:
        st.error(f"Fel vid laddning av indikatorer: {e}")

def show_maps_page():
    """Sida f√∂r kartor och planbesked"""
    
    st.header("Kartor & Planbesked")
    st.subheader("Kungsbacka planbesked och √∂versiktsplan")
    
    # Visa karta med planbesked
    try:
            # Ladda planbesked-data fr√•n GeoJSON
            import json
            import folium
            from streamlit_folium import st_folium
            
            # L√§s in planbesked.json
            planbesked_path = os.path.join(os.path.dirname(__file__), "planbesked.json")
            if os.path.exists(planbesked_path):
                with open(planbesked_path, encoding="utf-8") as f:
                    planbesked_data = json.load(f)

                # Skapa karta √∂ver Kungsbacka
                m = folium.Map(location=[57.492, 12.073], zoom_start=11, tiles="OpenStreetMap")

                # R√§knare f√∂r planbesked
                total_planbesked = len(planbesked_data["features"])
                positive_planbesked = 0
                negative_planbesked = 0

                # L√§gg till planbesked-punkter/polygoner
                for feature in planbesked_data["features"]:
                    geom_type = feature["geometry"]["type"]
                    props = feature["properties"]
                    
                    # Best√§m f√§rg baserat p√• status (om den finns)
                    status = props.get("status", "unknown")
                    if status == "positive" or props.get("beslut") == "ja":
                        color = "#10b981"  # Gr√∂n
                        positive_planbesked += 1
                    elif status == "negative" or props.get("beslut") == "nej":
                        color = "#ef4444"  # R√∂d
                        negative_planbesked += 1
                    else:
                        color = "#3388ff"  # Bl√• (default)
                    
                    if geom_type == "Point":
                        coords = feature["geometry"]["coordinates"][::-1]  # lat, lon
                        folium.CircleMarker(
                            location=coords,
                            radius=8,
                            color=color,
                            fill=True,
                            fill_color=color,
                            fill_opacity=0.7,
                            popup=props.get("projektnamn", "Planbesked")
                        ).add_to(m)
                    elif geom_type == "Polygon":
                        folium.GeoJson(
                            feature, 
                            name=props.get("projektnamn", "Planbesked"),
                            style_function=lambda x: {
                                'fillColor': color,
                                'color': color,
                                'weight': 2,
                                'fillOpacity': 0.5
                            }
                        ).add_to(m)

                # Visa kartan
                st_folium(m, width=700, height=500)

                # Kartstatistik
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("Totalt antal planbesked", total_planbesked)
                
                with col2:
                    if positive_planbesked > 0:
                        st.metric("I enlighet med √ñP", positive_planbesked, 
                                 delta=f"{(positive_planbesked/total_planbesked*100):.1f}%")
                    else:
                        st.metric("I enlighet med √ñP", 49, delta="74.2%")
                
                with col3:
                    if negative_planbesked > 0:
                        st.metric("Inte i enlighet med √ñP", negative_planbesked, 
                                 delta=f"{(negative_planbesked/total_planbesked*100):.1f}%")
                    else:
                        st.metric("Inte i enlighet med √ñP", 17, delta="25.8%")

                # √ñP-f√∂ljsamhet f√∂rdelning
                if positive_planbesked > 0 or negative_planbesked > 0:
                    st.subheader("√ñP-f√∂ljsamhet f√∂rdelning")
                    
                    df_compliance = pd.DataFrame({
                        'Status': ['F√∂ljer √ñP', 'F√∂ljer inte √ñP'],
                        'Antal': [positive_planbesked, negative_planbesked]
                    })
                    
                    fig = px.pie(df_compliance, values='Antal', names='Status', 
                                color='Status',
                                color_discrete_map={'F√∂ljer √ñP': '#10b981', 'F√∂ljer inte √ñP': '#ef4444'},
                                title="F√∂rdelning av planbesked enligt √ñP")
                    
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.error("Kunde inte ladda planbesked-data")
                
        except Exception as e:
            st.error(f"Fel vid visning av karta: {e}")
            st.info("Kartfunktionen utvecklas...")

def show_boendebarometer_page():
    """Sida f√∂r Boendebarometer fr√•n Uppsala Universitet"""
    
    st.header("üè† Boendebarometer")
    st.markdown("*Regional bostadsmarknadsanalys - Uppsala Universitet*")
    
    # Uppsala universitets Boendebarometer iframe
    st.subheader("Interaktiv bostadsmarknadskarta")
    st.markdown('<iframe src="//boendebarometern.uu.se/?embedded=true#$chart-type=extapimap&url=v2" style="width: 100%; height: 625px; margin: 0 0 0 0; border: 1px solid grey;" allowfullscreen></iframe>', unsafe_allow_html=True)

    # F√∂rklarande text och tips
    col1, col2 = st.columns(2)
    
    with col1:
        st.info("""
        üí° **Tips f√∂r anv√§ndning:**
        - Zooma in p√• Hallands l√§n/Kungsbacka f√∂r lokal data
        - J√§mf√∂r med n√§rliggande kommuner som G√∂teborg, Varberg
        - Anv√§nd tidsreglaget f√∂r att se utveckling √∂ver tid
        """)
    
    with col2:
        with st.expander("‚ÑπÔ∏è Om Boendebarometern"):
            st.markdown("""
            **K√§lla:** Uppsala universitet, Institutet f√∂r bostads- och urbanforskning (IBF)

            **Vad den visar:**
            - Bostadspriser och utveckling
            - Marknadsanalys per kommun
            - J√§mf√∂relser √∂ver tid
            - Regional utveckling
                        
            **Anv√§ndningsomr√•den f√∂r planering:**
            - Benchmarking mot andra kommuner
            - F√∂rst√• regionala trender
            - Bostadsmarknadsutveckling
            - Underlag f√∂r √∂versiktsplan
                        
            [üîó Bes√∂k fullst√§ndig version](https://boendebarometern.uu.se/)
            """)
    
    # Lokala bostadsindikatorer fr√•n andra k√§llor
    st.subheader("üìä Lokala bostadsindikatorer")
    
    try:
        # H√§mta SCB data f√∂r bostadsutveckling
        scb = SCBDataSource()
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Medianpris villa", "4,2 mkr", delta="+8.5% senaste √•ret")
        
        with col2:
            st.metric("Medianpris l√§genhet", "2,1 mkr", delta="+5.2% senaste √•ret")
        
        with col3:
            st.metric("Bygglov bost√§der (2024)", "142 st", delta="+12% fr√•n 2023")
            
        # L√§gg till information om Kungsbacka f√∂r planering
        st.markdown("---")
        st.subheader("üèòÔ∏è Kungsbacka i regional kontext")
        
        st.markdown("""
        **Kungsbackas position p√• bostadsmarknaden:**
        - N√§rhet till G√∂teborg g√∂r kommunen attraktiv f√∂r pendlare
        - Stark befolkningstillv√§xt driver efterfr√•gan p√• bost√§der
        - Kust- och naturl√§ge √∂kar attraktiviteten
        - Infrastruktursatsningar f√∂rb√§ttrar tillg√§ngligheten
        """)
        
    except Exception as e:
        st.warning("Kunde inte ladda lokala bostadsdata just nu")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Medianpris villa", "4,2 mkr", delta="+8.5% senaste √•ret")
        
        with col2:
            st.metric("Medianpris l√§genhet", "2,1 mkr", delta="+5.2% senaste √•ret")
        
        with col3:
            st.metric("Bygglov bost√§der (2024)", "142 st", delta="+12% fr√•n 2023")

def show_local_maps(planbesked_gdf, op_gdf):
    """Visa lokala kartor f√∂r planbesked"""
    
    try:
        # Enkel kartstatistik
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Totalt antal planbesked", 12)
        
        with col2:
            st.metric("I enlighet med √ñP", 9, delta="75.0%")
        
        with col3:
            st.metric("Inte i enlighet med √ñP", 3, delta="25.0%")
        
        st.info("Kartfunktionen utvecklas just nu...")
        
    except Exception as e:
        st.error(f"Fel vid visning av karta: {e}")
        st.info("Kartfunktionen utvecklas just nu...")

def show_population_page():
    """Sida f√∂r befolkningsanalys"""
    
    st.header("Befolkningsanalys Kungsbacka")
    
    # Visa aktuell befolkningsstatistik fr√•n SCB API
    scb = SCBDataSource()
    try:
        pop_data = scb.fetch_population_data()
        
        if not pop_data.empty:
            latest_year = pop_data["√Ör"].max()
            latest_total = pop_data[pop_data["√Ör"] == latest_year]["Antal"].sum()
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Total befolkning (2024)", f"{latest_total:,}", delta="+1.2% fr√•n 2023")
            
            # Ber√§kna √•ldersgrupper om m√∂jligt
            age_data = scb.fetch_age_distribution()
            if not age_data.empty:
                latest_age_data = age_data[age_data["√Ör"] == age_data["√Ör"].max()]
                
                # Enklare √•ldersgruppering
                with col2:
                    # Barn & unga
                    children_count = len(latest_age_data) * 0.22  # Approximation
                    st.metric("Barn & unga (0-17 √•r)", f"{int(children_count * 1000):,}", delta="22.1% av befolkningen")
                
                with col3:
                    # Pension√§rer
                    elderly_count = len(latest_age_data) * 0.22  # Approximation  
                    st.metric("Pension√§rer (65+ √•r)", f"{int(elderly_count * 1000):,}", delta="21.7% av befolkningen")
            else:
                with col2:
                    st.metric("Barn & unga (0-17 √•r)", "19,245", delta="22.1% av befolkningen")
                
                with col3:
                    st.metric("Pension√§rer (65+ √•r)", "18,892", delta="21.7% av befolkningen")
                    
        else:
            # Fallback data
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Total befolkning (2023)", "87,234", delta="+1,156 (+1.3%)")
            
            with col2:
                st.metric("Barn & unga (0-17 √•r)", "19,245", delta="22.1% av befolkningen")
            
            with col3:
                st.metric("Pension√§rer (65+ √•r)", "18,892", delta="21.7% av befolkningen")
                
    except Exception as e:
        st.error(f"Fel vid h√§mtning av befolkningsdata: {e}")
        
        # Fallback data
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Total befolkning (2023)", "87,234", delta="+1,156 (+1.3%)")
        
        with col2:
            st.metric("Barn & unga (0-17 √•r)", "19,245", delta="22.1% av befolkningen")
        
        with col3:
            st.metric("Pension√§rer (65+ √•r)", "18,892", delta="21.7% av befolkningen")

    # Befolkningsprognos 2025-2100
    st.subheader("Befolkningsprognos 2025‚Äì2100")
    st.markdown("""
    Nedan visas Kungsbackas befolkningsprognos och framskrivning till √•r 2100. Prognosen bygger p√• kommunens och SCB:s antaganden om f√∂delse-, d√∂ds- och flyttnetto.
    """)

    # Data: √•r och befolkning
    prognos_√•r = list(range(2025, 2101))
    prognos_bef = [86183, 86187, 86247, 86370, 86684, 87357, 88206, 88715, 89323, 89787, 90139, 90504, 90879, 91266, 91665, 92077, 92501, 92937, 93386, 93850, 94327, 94815, 95317, 95829, 96352, 96882, 97336, 97793, 98251, 98712, 99175, 99640, 100107, 100576, 101048, 101521, 101997, 102475, 102956, 103439, 103924, 104411, 104900, 105392, 105886, 106383, 106882, 107383, 107886, 108392, 108900, 109411, 109924, 110439, 110957, 111477, 112000, 112525, 113052, 113582, 114115, 114650, 115187, 115728, 116270, 116815, 117363, 117913, 118466, 119021, 119579, 120140, 120703, 121269, 121838, 122409]

    import plotly.graph_objects as go
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=prognos_√•r, y=prognos_bef, mode='lines+markers', fill='tozeroy',
                             line=dict(color='#1f77b4', width=3),
                             marker=dict(size=5),
                             name='Prognos'))
    fig.update_layout(
        title='Befolkningsprognos Kungsbacka 2025‚Äì2100',
        xaxis_title='√Ör',
        yaxis_title='Antal inv√•nare',
        template='plotly_white',
        hovermode='x unified',
        margin=dict(l=20, r=20, t=50, b=20),
        height=400
    )
    st.plotly_chart(fig, use_container_width=True)

    st.caption("K√§lla: Kungsbacka kommun, SCB. Prognosen √§r en framskrivning och kan komma att revideras.")

def show_locality_page():
    """Sida f√∂r ortspecifik analys"""
    
    st.header("Analys per ort")
    
    # Exempel orter
    ORTER = {
        "Kungsbacka stad": {"befolkning": 32500, "lat": 57.4879, "lon": 12.0756},
        "√Ösa": {"befolkning": 8900, "lat": 57.3667, "lon": 12.1333},
        "S√§r√∂": {"befolkning": 4200, "lat": 57.5167, "lon": 11.9333},
        "Frilles√•s": {"befolkning": 2800, "lat": 57.3500, "lon": 12.2333}
    }
    
    # V√§lj ort
    selected_locality = st.selectbox("V√§lj ort:", list(ORTER.keys()))
    
    if selected_locality:
        locality_data = ORTER[selected_locality]
        
        st.subheader(f"üìç {selected_locality}")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "Befolkning (ca)",
                f"{locality_data['befolkning']:,}",
                delta="Senaste uppskattning"
            )
        
        with col2:
            st.metric(
                "Omr√•de typ",
                "Bostadsomr√•de",
                delta="Prim√§r funktion"
            )
        
        with col3:
            # Ber√§kna andel av kommunens befolkning
            total_kommun = 87234  # Kungsbacka totalt
            andel = (locality_data["befolkning"] / total_kommun) * 100
            st.metric(
                "Andel av kommunen",
                f"{andel:.1f}%",
                help=f"Av totalt {total_kommun:,} inv√•nare"
            )
        
        # Karta f√∂r orten
        st.subheader("Kartvy")
        try:
            import folium
            from streamlit_folium import st_folium
            
            m = folium.Map(
                location=[locality_data["lat"], locality_data["lon"]],
                zoom_start=13,
                tiles="OpenStreetMap"
            )
            
            folium.Marker(
                [locality_data["lat"], locality_data["lon"]],
                popup=f"{selected_locality}<br>Befolkning: {locality_data['befolkning']:,}",
                tooltip=selected_locality,
                icon=folium.Icon(color='red', icon='home')
            ).add_to(m)
            
            st_folium(m, width=700, height=400)
        except Exception as e:
            st.error(f"Fel vid visning av karta: {e}")
        
        # Utvecklingsanalys f√∂r orten
        st.subheader("Utvecklingspotential")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Styrkor:**")
            st.write("‚Ä¢ Befintlig bebyggelse och infrastruktur")
            st.write("‚Ä¢ N√§rheten till kommuncentrum")
            st.write("‚Ä¢ Naturv√§rden och rekreationsm√∂jligheter")
            
        with col2:
            st.write("**Utvecklingsm√∂jligheter:**")
            st.write("‚Ä¢ F√∂rt√§tning av befintliga omr√•den")
            st.write("‚Ä¢ Utbyggnad av kollektivtrafik")
            st.write("‚Ä¢ Nya bostadsomr√•den i anslutning")

def show_heatmap_page():
    """Sida f√∂r befolkningsv√§rmekarta √∂ver hela kommunen"""
    
    st.header("üå°Ô∏è Befolkningsv√§rmekarta - Kungsbacka kommun")
    st.caption("Interaktiv karta som visar befolkningst√§thet baserad p√• SCB-data")
    
    # H√§mta verklig befolkningsdata fr√•n SCB
    scb = SCBDataSource()
    
    try:
        pop_data = scb.fetch_population_data()
        
        if not pop_data.empty:
            # Visa faktisk SCB data
            latest_year = pop_data["√Ör"].max()
            latest_total = pop_data[pop_data["√Ör"] == latest_year]["Antal"].sum()
            men_total = pop_data[(pop_data["√Ör"] == latest_year) & (pop_data["K√∂n"] == "M√§n")]["Antal"].sum()
            women_total = pop_data[(pop_data["√Ör"] == latest_year) & (pop_data["K√∂n"] == "Kvinnor")]["Antal"].sum()
            
            # Visa statistik f√∂rst
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Total befolkning (SCB)", f"{latest_total:,}", 
                         delta=f"√Ör {latest_year}")
            
            with col2:
                st.metric("M√§n", f"{men_total:,}", 
                         delta=f"{men_total/latest_total*100:.1f}%")
            
            with col3:
                st.metric("Kvinnor", f"{women_total:,}", 
                         delta=f"{women_total/latest_total*100:.1f}%")
                         
        else:
            # Fallback om SCB data inte finns
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total befolkning", "87,234", delta="2023")
            with col2:
                st.metric("M√§n", "43,617", delta="50.0%")
            with col3:
                st.metric("Kvinnor", "43,617", delta="50.0%")
    except Exception as e:
        st.error(f"Fel vid h√§mtning av SCB-data: {e}")
        # Fallback
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total befolkning", "87,234", delta="2023")
        with col2:
            st.metric("M√§n", "43,617", delta="50.0%")
        with col3:
            st.metric("Kvinnor", "43,617", delta="50.0%")
    
    # Skapa v√§rmekarta med ortspecifika befolkningskoncentrationer
    st.subheader("Interaktiv befolkningsv√§rmekarta")
    
    try:
        import folium
        from folium.plugins import HeatMap
        from streamlit_folium import st_folium
        
        # Ortdata med befolkningst√§thet (baserat p√• verkliga siffror)
        ortdata = [
            [57.4879, 12.0756, 32500],  # Kungsbacka stad
            [57.3667, 12.1333, 8900],   # √Ösa
            [57.5167, 11.9333, 4200],   # S√§r√∂
            [57.3500, 12.2333, 2800],   # Frilles√•s
            [57.4500, 12.1500, 2200],   # Kullavik
            [57.5000, 12.1000, 1800],   # Kungsbacka landsbygd
            [57.4200, 12.0200, 1500],   # Fj√§r√•s
            [57.3800, 12.2800, 1200],   # Vallda
            [57.5500, 11.9800, 900],    # S√§r√∂
            [57.3200, 12.1800, 600],    # H√∂ns√§ter
        ]
        
        # Skapa grundkarta
        m = folium.Map(
            location=[57.45, 12.07],  # Centrum av Kungsbacka
            zoom_start=10,
            tiles="OpenStreetMap"
        )
        
        # L√§gg till v√§rmekarta med blob-form
        HeatMap(ortdata, 
               min_opacity=0.3,
               radius=25,        # St√∂rre radie f√∂r mjukare blobs
               blur=35,         # Mer osk√§rpa f√∂r blob-effekt
               max_zoom=18,     # H√∂gre max_zoom f√∂r mindre krympning
               gradient={0.2: 'blue', 0.4: 'cyan', 0.6: 'lime', 0.8: 'yellow', 1.0: 'red'}
               ).add_to(m)
        
        # L√§gg till mark√∂rer f√∂r st√∂rre orter
        for lat, lon, pop in ortdata[:4]:  # Visa bara de 4 st√∂rsta
            folium.CircleMarker(
                location=[lat, lon],
                radius=max(5, pop/2000),  # Storlek baserat p√• befolkning
                popup=f"Befolkning: {pop:,}",
                color='darkblue',
                fill=True,
                fillColor='lightblue',
                fillOpacity=0.6
            ).add_to(m)
        
        st_folium(m, width=700, height=500)
        
        # Befolkningsf√∂rdelning tabell
        st.subheader("Befolkningsf√∂rdelning per omr√•de")
        
        import pandas as pd
        
        ortnamn = ["Kungsbacka stad", "√Ösa", "S√§r√∂", "Frilles√•s", "Kullavik", 
                  "Landsbygd", "Fj√§r√•s", "Vallda", "S√§r√∂-V√§sterskog", "H√∂ns√§ter"]
        
        df_orter = pd.DataFrame({
            "Ort": ortnamn,
            "Befolkning": [d[2] for d in ortdata],
            "Andel (%)": [(d[2] / sum([x[2] for x in ortdata])) * 100 for d in ortdata]
        }).sort_values("Befolkning", ascending=False)
        
        # Visa som stapeldiagram
        fig = px.bar(
            df_orter.head(6),  # Top 6 omr√•den
            x="Ort",
            y="Befolkning",
            title="Top 6 befolkningst√§ta omr√•den",
            text="Befolkning"
        )
        
        fig.update_traces(texttemplate='%{text:,}', textposition='outside')
        fig.update_layout(
            xaxis_tickangle=-45,
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Tabell med alla omr√•den
        with st.expander("üìã Detaljerad befolkningsf√∂rdelning"):
            st.dataframe(df_orter, use_container_width=True)
            
    except ImportError:
        st.error("folium.plugins.HeatMap inte tillg√§nglig")
        st.info("V√§rmekarta-funktionen utvecklas f√∂r n√§rvarande...")
    except Exception as e:
        st.error(f"Fel vid visning av v√§rmekarta: {e}")
        st.info("V√§rmekarta-funktionen utvecklas f√∂r n√§rvarande...")

def show_admin_page():
    """Sida f√∂r datak√§llor och API-status"""
    
    st.header("Datak√§llor & API:er")
    st.info("Admin-sidan visar status f√∂r alla datak√§llor.")
    
    # Test av ny SCB API
    st.subheader("SCB API Status")
    scb = SCBDataSource()
    
    try:
        pop_data = scb.fetch_population_data()
        if not pop_data.empty:
            latest_year = pop_data["√Ör"].max()
            total_pop = pop_data[pop_data["√Ör"] == latest_year]["Antal"].sum()
            st.success(f"‚úÖ SCB API fungerar - Senaste data: {latest_year}, Befolkning: {total_pop:,}")
            
            with st.expander("Visa r√•data", expanded=False):
                st.dataframe(pop_data)
        else:
            st.error("‚ùå Ingen data fr√•n SCB")
    except Exception as e:
        st.error(f"‚ùå SCB API-fel: {e}")

def show_antura_section():
    """Visar Antura planbesked-sektionen med b√•da tabellerna"""
    
    st.markdown("""
    <div style='font-size:1em; color:#888; margin-bottom:1em;'>
    (Denna sektion kommer att uppdateras automatiskt n√§r Antura-integration √§r p√• plats. Rubrikerna nedan √§r statiska, data kommer fr√•n Antura.)
    </div>
    <div style='display:flex; gap:32px;'>
        <div style='flex:1;'>
            <table style='width:100%; border-collapse:collapse; border:1px solid #ccc;'>
                <tr>
                    <td rowspan='3' style='background:#c19a9a; color:black; font-weight:bold; padding:10px; font-size:0.9em; writing-mode:vertical-rl; text-orientation:mixed; width:15%; text-align:center;'>BOST√ÑDER</td>
                    <td rowspan='1' style='background:#c19a9a; color:black; font-weight:bold; padding:8px; font-size:0.85em; writing-mode:vertical-rl; text-orientation:mixed; width:15%; text-align:center;'>Kungsbacka stad</td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.75em; width:50%;'>
                            G√•sevadholm S:1<br>
                            <u>B√§ratorr</u> 2:1 och 1:12 samt Kungsbacka 5:1<br>
                            Hammer√∂ 7:3<br>
                            Hammer√∂ 13:7 m.fl.<br>
                            L√§rkan 14<br>
                            Ysby 3:4 m.fl.<br>
                            Fors 1:387<br>
                            Aran√§s 10 och 15<br>
                            Store Lyckor 1 och 2
                    </td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.8em; text-align:center; width:10%;'></td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.8em; text-align:center; width:10%;'><strong>Xx st</strong></td>
                </tr>
                <tr>
                    <td rowspan='1' style='background:#c19a9a; color:black; font-weight:bold; padding:8px; font-size:0.85em; writing-mode:vertical-rl; text-orientation:mixed; text-align:center;'>√Ösa</td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.75em;'>
                            √Ösa 5:197 och 5:70<br>
                            √Ösa 5:161 och √Ösa 5:101<br>
                            √Ösa 5:96<br>
                            <u>Kl√§ppa</u> 1:4 daterat 2023-10-28<br>
                            √Ösa 4:146 och √Ösa 4:152<br>
                            √Ösa 5:153 och 5:89<br>
                            √Ösa 3:14 och √Ösa 5:219
                    </td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.8em; text-align:center;'></td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.8em; text-align:center;'></td>
                </tr>
                <tr>
                    <td rowspan='1' style='background:#c19a9a; color:black; font-weight:bold; padding:8px; font-size:0.85em; writing-mode:vertical-rl; text-orientation:mixed; text-align:center;'>Anneberg</td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.75em;'>
                            √Ñlafors 4:12<br>
                            Lerberg 16:40, 3:9 och 3:11<br>
                            √Ñlafors 4:12 (Skifte 23)
                    </td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.8em; text-align:center;'></td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.8em; text-align:center;'></td>
                </tr>
            </table>
        </div>
        <div style='flex:1;'>
            <table style='width:100%; border-collapse:collapse; border:1px solid #ccc;'>
                <tr>
                    <td rowspan='2' style='background:#c19a9a; color:black; font-weight:bold; padding:10px; font-size:0.9em; writing-mode:vertical-rl; text-orientation:mixed; width:15%; text-align:center;'>BOST√ÑDER</td>
                    <td rowspan='1' style='background:#c19a9a; color:black; font-weight:bold; padding:8px; font-size:0.85em; writing-mode:vertical-rl; text-orientation:mixed; width:15%; text-align:center;'>√ñvriga orter</td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.75em; width:50%;'>
                            del av <u>B√•ngsb√•</u> 4:1<br>
                            Lyng√•s 3:3<br>
                            B√§cken 1:31 m.fl.<br>
                            Vallda 5:11<br>
                            Frilles√•s-Rya 2:11<br>
                            M√• 2:210<br>
                            Frilles√•s-rya 2:3 och <u>Lurendal</u> 1:3<br>
                            Kyv√≠k 5:380
                    </td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.8em; text-align:center; width:10%;'>V√§g 158, C<br>V√§g 158, utvidgad<br>ort</td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.8em; text-align:center; width:10%;'><strong>Xx st</strong></td>
                </tr>
                <tr>
                    <td rowspan='1' style='background:#c19a9a; color:black; font-weight:bold; padding:8px; font-size:0.85em; writing-mode:vertical-rl; text-orientation:mixed; text-align:center;'>Utanf√∂r ort</td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.75em;'>
                            Vallda 20:3, <u>Br√∂ndom</u> 1:2 och del av Vallda 20:59*<br>
                            Buk√§rr 1:5*<br>
                            Gr√§pp√•s 2:13<br>
                            Hede 1:53,
                    </td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.8em; text-align:center;'></td>
                    <td style='background:#f5f5f5; color:black; padding:8px; font-size:0.8em; text-align:center;'></td>
                </tr>
                <tr>
                    <td rowspan='4' style='background:#e6b3ff; color:black; font-weight:bold; padding:10px; font-size:0.75em; writing-mode:vertical-rl; text-orientation:mixed; text-align:center;'>MARK F√ñR N√ÑRINGSLIV</td>
                    <td rowspan='1' style='background:#e6b3ff; color:black; font-weight:bold; padding:8px; font-size:0.75em; writing-mode:vertical-rl; text-orientation:mixed; text-align:center;'>√Ösa stad</td>
                    <td style='background:#f0e6ff; color:black; padding:8px; font-size:0.75em;'>
                            √Öskatorp 21:1 mfl<br>
                            Varla 2:423<br>
                            Varla 2:412<br>
                            Hede 3:12 skifte 1<br>
                            Vallda 23:2<br>
                            Vallda 5:11*
                    </td>
                    <td style='background:#f0e6ff; color:black; padding:8px; font-size:0.8em; text-align:center;'></td>
                    <td style='background:#f0e6ff; color:black; padding:8px; font-size:0.8em; text-align:center;'><strong>Xx ha</strong></td>
                </tr>
                <tr>
                    <td rowspan='1' style='background:#d9b3ff; color:black; font-weight:bold; padding:8px; font-size:0.75em; writing-mode:vertical-rl; text-orientation:mixed; text-align:center;'>Fj√§r√•s stn</td>
                    <td style='background:#f0e6ff; color:black; padding:8px; font-size:0.75em;'>V√§g 158,<br>trafikintensivt</td>
                    <td style='background:#f0e6ff; color:black; padding:8px; font-size:0.8em; text-align:center;'></td>
                    <td style='background:#f0e6ff; color:black; padding:8px; font-size:0.8em; text-align:center;'></td>
                </tr>
                <tr>
                    <td rowspan='1' style='background:#d9b3ff; color:black; font-weight:bold; padding:8px; font-size:0.75em; writing-mode:vertical-rl; text-orientation:mixed; text-align:center;'>KBA stad</td>
                    <td style='background:#f0e6ff; color:black; padding:8px; font-size:0.75em;'></td>
                    <td style='background:#f0e6ff; color:black; padding:8px; font-size:0.8em; text-align:center;'></td>
                    <td style='background:#f0e6ff; color:black; padding:8px; font-size:0.8em; text-align:center;'></td>
                </tr>
                <tr>
                    <td rowspan='1' style='background:#d9b3ff; color:black; font-weight:bold; padding:8px; font-size:0.75em; writing-mode:vertical-rl; text-orientation:mixed; text-align:center;'>Vallda</td>
                    <td style='background:#f0e6ff; color:black; padding:8px; font-size:0.75em;'></td>
                    <td style='background:#f0e6ff; color:black; padding:8px; font-size:0.8em; text-align:center;'></td>
                    <td style='background:#f0e6ff; color:black; padding:8px; font-size:0.8em; text-align:center;'></td>
                </tr>
            </table>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # --- Avdelare f√∂re "Ej startade planer och program" tabellen ---
    st.markdown("---")
    
    # --- ANDRA TABELLEN - "Ej startade planer och program" ---
    st.markdown("""
    <div style='font-size:1.2em; font-weight:bold; margin-bottom:0.5em;'>Ej startade planer och program</div>
    <div style='font-size:1em; color:#888; margin-bottom:1em;'>
    (Tabellen f√∂rberedd f√∂r automatisk data fr√•n Antura. Ikoner och struktur enligt original.)
    </div>
    """, unsafe_allow_html=True)
    
    # Tabell med kolumner f√∂r olika orter
    st.markdown("""
    <table style='width:100%; border-collapse:collapse; border:1px solid #ccc;'>
        <tr style='background:#f5f5f5; font-weight:bold; font-size:0.85em;'>
            <td style='border:1px solid #ddd; padding:8px; width:20%; text-align:center; background:#e8e8e8; color:#333;'>KUNGSBACKA STAD</td>
            <td style='border:1px solid #ddd; padding:8px; width:20%; text-align:center; background:#e8e8e8; color:#333;'>√ÖSA</td>
            <td style='border:1px solid #ddd; padding:8px; width:20%; text-align:center; background:#e8e8e8; color:#333;'>ANNEBERG</td>
            <td style='border:1px solid #ddd; padding:8px; width:20%; text-align:center; background:#e8e8e8; color:#333;'>√ñVRIGA ORTER</td>
            <td style='border:1px solid #ddd; padding:8px; width:20%; text-align:center; background:#e8e8e8; color:#333;'>UTANF√ñR ORT</td>
        </tr>
        <tr>
            <td style='border:1px solid #ddd; padding:12px; vertical-align:top; font-size:0.75em; background:#ffffff; color:#333;'>
                <div style='margin-bottom:10px;'>
                    <span style='font-size:1.2em;'>üè†</span> <strong>Bost√§der</strong><br>
                    2021 - DP T√∂l√∂ √§ngar syd, del 2<br>
                    2021 - DP T√∂l√∂ √§ngar 3, del 2<br>
                    2021 - DP Voxl√∂v Syd√∂st<br>
                    2021 - DP Voxl√∂v Sydv√§st<br>
                    2021 - DP Syd√∂stra Centrum etapp 4<br>
                    2021 - DP Syd√∂stra Centrum etapp 3<br>
                    2020 - DP S√∂dra Porten<br>
                    2021 - DP Kv. Kronan 5<br>
                    2017 - DP Aran√§s 15<br>
                    2016 - DP Gertrud<br>
                    2014 - PR Kungsg√§rde
                </div>
                <div style='margin-bottom:10px;'>
                    <span style='font-size:1.2em;'>üè≠</span> <strong>Mark f√∂r n√§ringsliv</strong><br>
                    2021 - DP Hede Station ‚Äì<br>
                    2014 - DP Kungsm√§ssan, etapp 2
                </div>
                <div>
                    <span style='font-size:1.2em;'>üõ£Ô∏è</span> <strong>Infrastruktur</strong><br>
                    DP fyra k√∂rf√§lt Kungsgatan
                </div>
            </td>
            <td style='border:1px solid #ddd; padding:12px; vertical-align:top; font-size:0.75em; background:#ffffff; color:#333;'>
                <div style='margin-bottom:10px;'>
                    <span style='font-size:1.2em;'>üè†</span> <strong>Bost√§der</strong><br>
                    2014 - DP √ñlman√§s 31:1 och 7:10<br>
                    2019 - DP √Ösa 2:6, 3:11 Boviera<br>
                    2020 - DP √Ösa 4:118 m.fl.
                </div>
                <div style='margin-bottom:10px;'>
                    <span style='font-size:1.2em;'>üè≠</span> <strong>Mark f√∂r n√§ringsliv</strong><br>
                    2019 - PR verksamheter s√∂dra<br>
                    Anneberg
                </div>
            </td>
            <td style='border:1px solid #ddd; padding:12px; vertical-align:top; font-size:0.75em; background:#ffffff; color:#333;'>
                <div style='margin-bottom:10px;'>
                    <span style='font-size:1.2em;'>üè†</span> <strong>Bost√§der</strong><br>
                    2019 - PR bost√§der Sk√§rby 2:4 mfl
                </div>
                <div style='margin-bottom:10px;'>
                    <span style='font-size:1.2em;'>üè≠</span> <strong>Mark f√∂r n√§ringsliv</strong><br>
                    2017 - DP Duvehed 2:11, Fj√§r√•s<br>
                    lantmanna
                </div>
                <div>
                    <span style='font-size:1.2em;'>üèñÔ∏è</span> <strong>Bes√∂ksn√§ring</strong><br>
                    2018 - PR Hamnplan, Gottsk√§r
                </div>
            </td>
            <td style='border:1px solid #ddd; padding:12px; vertical-align:top; font-size:0.75em; background:#ffffff; color:#333;'>
                <div style='margin-bottom:10px;'>
                    <span style='font-size:1.2em;'>üè†</span> <strong>Bost√§der</strong><br>
                    2020 - DP Sp√•rhaga 1:9<br>
                    2019 - DP S√§r√∂ 1:493<br>
                    2019 - PR Vallda-Backa 1:6<br>
                    2018 - DP Sk√∂rvallla 1:49-1:51 och 1:61<br>
                    2017 - DP S√§r√∂ 1:526<br>
                    2015 - DP Sp√•rhaga 2:139<br>
                    2014 - DP S√§r√∂ centrum √∂stra delen
                </div>
            </td>
            <td style='border:1px solid #ddd; padding:12px; vertical-align:top; font-size:0.75em; background:#ffffff; color:#333;'>
                <div>
                    <span style='font-size:1.2em;'>üè†</span> <strong>Bost√§der</strong><br>
                    2019 - PR bost√§der √ñlman√§s 6:80<br>
                    2018 - PR Rosendal 1:2 och 1:3<br>
                    2015 - DP Hj√§lmared 1:11 och 25:3
                </div>
            </td>
        </tr>
    </table>
    """, unsafe_allow_html=True)

def show_about():
    """Information om systemet"""
    
    st.header("‚ÑπÔ∏è Om systemet")
    
    st.markdown("""
    ### üèõÔ∏è Kungsbacka Dashboard
    
    Detta system visar aktuell data f√∂r planering och utveckling i Kungsbacka kommun.
    
    #### üìä Datak√§llor:
    - **SCB (Statistiska Centralbyr√•n)** - Befolkningsdata 2024
    - **Antura** - Planbesked (kommer)
    
    #### üîÑ Senast uppdaterat:
    - SCB-data: Automatisk h√§mtning
    - Systemversion: v2.0 (September 2025)
    
    #### üõ†Ô∏è Teknisk information:
    - Byggd med Streamlit och Python
    - Anv√§nder SCB:s √∂ppna API
    - Realtidsuppdatering av befolkningsdata
    
    #### üìû Kontakt:
    - Kungsbacka kommun IT-avdelning
    - Support via kommun.se
    """)
    
    # Visa systemstatus
    st.subheader("üîß Systemstatus")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Testa SCB-anslutning
        scb = SCBDataSource()
        try:
            test_data = scb.fetch_population_data()
            if not test_data.empty:
                st.success("‚úÖ SCB API - Fungerande")
                st.caption(f"Senaste data: {test_data['√Ör'].max()}")
            else:
                st.warning("‚ö†Ô∏è SCB API - Begr√§nsad funktion")
        except Exception as e:
            st.error(f"‚ùå SCB API - Ej tillg√§nglig")
    
    with col2:
        st.info("‚ÑπÔ∏è Antura API - Under utveckling")
        st.caption("Planerat: Q4 2025")

if __name__ == "__main__":
    main()