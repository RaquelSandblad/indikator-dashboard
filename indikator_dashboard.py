# indikator_dashboard.py

import streamlit as st
from PIL import Image
import pandas as pd
import folium
from streamlit_folium import st_folium
import matplotlib.pyplot as plt
import requests
import json
import geopandas as gpd
from shapely.geometry import Point
import os
from SCB_Dataservice import SCBService
scb_service = SCBService()

# Streamlit config
st.set_page_config(page_title="Uppf√∂ljning av √ñP - Kungsbacka", layout="wide")

@st.cache_data(ttl=86400)
def las_in_planbesked_och_op():
    planbesked = gpd.read_file("planbesked.json").to_crs(epsg=4326)
    op = gpd.read_file("op.json").to_crs(epsg=4326)

    planbesked_m = planbesked.to_crs(epsg=3006)
    op_m = op.to_crs(epsg=3006)
    op_union = op_m.unary_union

    def kontrollera_planbesked(row, op_geom, tr√∂skel=0.5):
        geom = row.geometry
        if geom is None or geom.is_empty or not geom.is_valid or geom.area == 0:
            return False
        if not geom.intersects(op_geom):
            return False
        intersektion = geom.intersection(op_geom)
        if intersektion.is_empty or not intersektion.is_valid:
            return False
        andel_inom = intersektion.area / geom.area if geom.area > 0 else 0
        return andel_inom >= tr√∂skel

    planbesked_m["f√∂ljer_op"] = planbesked_m.apply(
        lambda row: kontrollera_planbesked(row, op_union, tr√∂skel=0.5), axis=1
    )

    planbesked["f√∂ljer_op"] = planbesked_m["f√∂ljer_op"]

    return planbesked, op  # 

# Konfigurera API-bas-URL (anv√§nds n√§r vi kopplar in mikroservices)
API_BASE_URL = os.environ.get("API_BASE_URL", "http://localhost:5000/api")

# SIDVAL
val = st.sidebar.radio("V√§lj sida", [
    "Introduktion",
    "Kommunniv√• - Planbesked",
    "Kommunniv√• - F√∂rhandsbesked",   # üëà Ny sida h√§r!
    "Kommunniv√• - Befolkning",
    "Kommunniv√• - V√§rmekarta",
    "Kommunniv√• - Kollektivtrafik",
    "Kungsbacka stad",
    "Anneberg", "√Ösa", "Kullavik", "S√§r√∂", "Vallda", "Onsala", "Fj√§r√•s", "Frilles√•s"
])

# Ny funktion: h√§mta befolkning baserat p√• k√∂n och √•lder

def hamta_filterad_befolkning(region_code="1384", kon=["1", "2"], alder_intervall=["20", "21", "22", "23", "24"], year="2023"):
    query = {
        "query": [
            {
                "code": "Region",
                "selection": { "filter": "item", "values": [region_code] }
            },
            {
                "code": "Kon",
                "selection": { "filter": "item", "values": kon }
            },
            {
                "code": "Alder",
                "selection": { "filter": "item", "values": alder_intervall }
            },
            {
                "code": "Tid",
                "selection": { "filter": "item", "values": [year] }
            }
        ],
        "response": {
            "format": "json"
        }
    }
    print(f"[DEBUG] Genererad query: {query}")  # Debugutskrift
    return scb_service.fetch_data("BE/BE0101/BE0101A/BefolkningNy", query)
    
def hamta_befolkningstrend(region_code="1384", years=None):
    return scb_service.get_population_trend(region_code=region_code, years=years)

def hamta_aldersfordelning():
    # Skapa query f√∂r att h√§mta √•ldersf√∂rdelning
    query = {
        "query": [
            {"code": "Region", "selection": {"filter": "item", "values": ["1384"]}},
            {"code": "Kon", "selection": {"filter": "item", "values": ["1", "2"]}},
            {"code": "Alder", "selection": {"filter": "item", "values": [str(i) for i in range(0, 101)]}},  # Fixad √•ldersintervall
            {"code": "Tid", "selection": {"filter": "item", "values": ["2023"]}}
        ],
        "response": {"format": "json"}
    }

    # Debug: Visa query
    st.write("Debug: Skickad query till SCB API f√∂r √•ldersf√∂rdelning")
    st.json(query)

    try:
        # Skicka query till SCB API
        data = scb_service.fetch_data("BE/BE0101/BE0101A/BefolkningNy", query)
        st.write("Debug: Data returnerad fr√•n SCB API:")
        st.write(data)

        # Omvandla till DataFrame om data finns
        if "data" in data:
            return pd.DataFrame(data["data"])
        else:
            st.error("üö® Inga data returnerades fr√•n SCB API.")
            return pd.DataFrame()  # Returnera tom DataFrame
    except requests.exceptions.HTTPError as e:
        st.error(f"üö® Kunde inte h√§mta data fr√•n SCB API: {e}")
        return pd.DataFrame()  # Returnera tom DataFrame
    except Exception as e:
        st.error(f"üö® Ett ov√§ntat fel intr√§ffade: {e}")
        return pd.DataFrame()  # Returnera tom DataFrame

def visa_befolkningsutveckling(df, rubrik="Befolkningsutveckling"):
    if df.empty:
        st.info("Ingen data att visa.")
        return
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.plot(df["√Ör"], df["Antal"], marker='o', linestyle='-', color="#1f77b4")
    ax.set_title(rubrik, fontsize=14)
    ax.set_xlabel("√Ör")
    ax.set_ylabel("Antal inv√•nare")
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.get_yaxis().set_major_formatter(
        plt.matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',').replace(',', ' '))
    )
    plt.tight_layout()
    st.pyplot(fig)

# Visa i befolkningssidan
if val == "Kommunniv√• - Befolkning":
    st.title("Kommunniv√• ‚Äì Befolkningsstatistik")

    k√∂n_val = st.selectbox("V√§lj k√∂n", {"Totalt": ["1", "2"], "Kvinnor": ["2"], "M√§n": ["1"]})
    √•lder_val = st.selectbox("V√§lj √•ldersintervall", [f"{i}-{i+4}" for i in range(0, 100, 5)])
    
    # Kontrollera att √•lder_val √§r korrekt
    st.write(f"Debug: √Öldersintervall som valts: {√•lder_val}")
    if √•lder_val is None or "-" not in √•lder_val:
        st.error("üö® V√§nligen v√§lj ett giltigt √•ldersintervall.")
    else:
        start, end = map(int, √•lder_val.split("-"))
        alder_values = [str(i) for i in range(start, end + 1)]
    # Skapa query f√∂r debugvisning
    query = {
        "query": [
            {"code": "Region", "selection": {"filter": "item", "values": ["1384"]}},
            {"code": "Kon", "selection": {"filter": "item", "values": k√∂n_val}},
            {"code": "Alder", "selection": {"filter": "item", "values": alder_values}},
            {"code": "Tid", "selection": {"filter": "item", "values": ["2023"]}}
        ],
        "response": {"format": "json"}
    }

    # Visa debug (valfritt)
    with st.expander("üì¶ Visa skickad SCB-query"):
        st.json(query)

# F√∂rs√∂k h√§mta antal ‚Äì med skydd
    try:
        antal = scb_service.fetch_data("BE/BE0101/BE0101A/BefolkningNy", query)
        total = sum(int(d["values"][0].replace("..", "0")) for d in antal.get("data", []))
        st.metric("Totalt antal i valt urval", f"{total:,}")
    except Exception as e:
        st.error("üö® Kunde inte h√§mta data fr√•n SCB ‚Äì kontrollera att urvalet √§r giltigt.")


        trend_df = hamta_befolkningstrend()
        if not trend_df.empty and len(trend_df) >= 2:
            visa_befolkningsutveckling(trend_df)

        df = hamta_aldersfordelning()
        st.write("Debug: Dataframe inneh√•ll fr√•n hamta_aldersfordelning:")
        st.write(df)
        visa_alderspyramid(df)

# ---------------- ANV√ÑNDNING ----------------
# ---------------- FUNKTION: Visa planbesked p√• karta ----------------
def visa_planbesked_karta(planbesked, op):
    st.subheader("Planbesked och √ñversiktsplan (√ñP)") 
    karta = folium.Map(location=[57.5, 12.0], zoom_start=11)

    # Visa eller g√∂m √ñP-lagret
    visa_op = st.checkbox("Visa √ñversiktsplan (√ñP)", value=False)

    if visa_op:
        folium.GeoJson(op, name="√ñversiktsplan", style_function=lambda x: {
            "color": "blue",
            "weight": 1,
            "fillOpacity": 0.1,
        }).add_to(karta)


    # L√§gg till varje planbesked
    for idx, row in planbesked.iterrows():
        color = "green" if row["f√∂ljer_op"] else "red"
        popup_text = row.get("projektnamn", "Planbesked")
        folium.GeoJson(
            row.geometry.__geo_interface__,  # Denna fix!
            style_function=lambda feature, color=color: {
                "fillColor": color,
                "color": color,
                "weight": 2,
                "fillOpacity": 0.4,
            },
            tooltip=popup_text
        ).add_to(karta)

    # Visa kartan en g√•ng, efter loopen!
    st_folium(karta, width=800, height=600)

# ---------------- FUNKTION: h√§mta befolkningstrend fr√•n SCB ----------------
@st.cache_data
def hamta_befolkningstrend(region_code="1384", years=None):
    return scb_service.get_population_trend(region_code=region_code, years=years)


# ---------------- FUNKTION: h√§mta inv√•nare per ort (dummyversion) ----------------
def hamta_invanare_ort():
    data = {
        "Kungsbacka stad": 23500,
        "Anneberg": 3800,
        "√Ösa": 3400,
        "Kullavik": 4100,
        "S√§r√∂": 5200,
        "Vallda": 4600,
        "Onsala": 11900,
        "Fj√§r√•s": 3800,
        "Frilles√•s": 2500
    }
    return data

# ---------------- FUNKTION: visa √•lderspyramid ----------------
def visa_alderspyramid(df, rubrik="√Ölderspyramid"):
    if df.empty:
        st.error("üö® √Ölderspyramiden kunde inte visas eftersom det saknas data.")
        return
    
    # Kontrollera att n√∂dv√§ndiga kolumner finns
    required_columns = {"√Ölder", "K√∂n", "Antal"}
    if not required_columns.issubset(df.columns):
        st.error("üö® Data saknar n√∂dv√§ndiga kolumner f√∂r att skapa √•lderspyramiden.")
        st.write(f"Debug: Tillg√§ngliga kolumner: {df.columns}")
        return

    # Kontrollera √•ldersv√§rden
    df["√Ölder"] = pd.to_numeric(df["√Ölder"], errors="coerce")
    if df["√Ölder"].isnull().all():
        st.error("üö® Data inneh√•ller inga giltiga √•ldersv√§rden.")
        return

    # Forts√§tt med att skapa √•lderspyramidgrafen
    import matplotlib.ticker as ticker
    df_pivot = df.pivot_table(index="√Ölder", columns="K√∂n", values="Antal", aggfunc="sum", fill_value=0)
    df_pivot["M√§n"] = -df_pivot.get("M√§n", 0)  # Negativa v√§rden f√∂r m√§n
    max_val = max(abs(df_pivot["M√§n"].min()), df_pivot["Kvinnor"].max())

    fig, ax = plt.subplots(figsize=(6, 8))
    ax.barh(df_pivot.index, df_pivot["M√§n"], color="#69b3a2", label="M√§n")
    ax.barh(df_pivot.index, df_pivot["Kvinnor"], color="#ff9999", label="Kvinnor")
    ax.set_xlim(-max_val * 1.05, max_val * 1.05)
    ax.set_xlabel("Antal personer")
    ax.set_ylabel("√Ölder")
    ax.set_title(rubrik, fontsize=14)
    ax.axvline(0, color="gray", linewidth=0.5)
    ax.legend(loc="upper right", frameon=False)

    plt.tight_layout()
    st.pyplot(fig)

# ---------------- FUNKTION: Visa temarubrik med f√§rgkod ----------------
def temarubrik(titel, f√§rg="#f1c40f"):  # Standardf√§rg: gul
    st.markdown(f"""
    <div style='background-color:{f√§rg};padding:0.5em 1em;border-radius:8px;margin-top:1em;margin-bottom:1em'>
        <h4 style='color:white;margin:0'>{titel}</h4>
    </div>
    """, unsafe_allow_html=True)

# ---------------- FUNKTION: visa befolkningsutveckling ----------------
def visa_befolkningsutveckling(df, rubrik="Befolkningsutveckling"):
    if df.empty:
        st.info("Ingen data att visa.")
        return
    
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.plot(df["√Ör"], df["Antal"], marker='o', linestyle='-', color="#1f77b4")
    
    ax.set_title(rubrik, fontsize=14)
    ax.set_xlabel("√Ör")
    ax.set_ylabel("Antal inv√•nare")
    ax.grid(True, linestyle='--', alpha=0.7)
    
    # Formatera y-axeln med tusentalsavgr√§nsare
    ax.get_yaxis().set_major_formatter(
        plt.matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',').replace(',', ' '))
    )
    
    plt.tight_layout()
    st.pyplot(fig)

# ---------------- FUNKTION: visa v√§rmekarta ----------------
def visa_befolkningstatet_heatmap():
    # Konfigurera API-slutpunkt och query f√∂r SCB
    BASE_URL = "https://api.scb.se/OV0104/v1/doris/sv/ssd/"
    query = {
        "query": [
            {
                "code": "Region",
                "selection": {
                    "filter": "item",
                    "values": ["1384"]  # Kommunens kod (Kungsbacka)
                }
            },
            {
                "code": "Tid",
                "selection": {
                    "filter": "item",
                    "values": ["2024"]  # √Örtal f√∂r data
                }
            }
        ],
        "response": {
            "format": "json"
        }
    }

    try:
        # H√§mta data fr√•n SCB:s API
        response = requests.post(BASE_URL + "BE/BE0101/BE0101A/BefolkningNy", json=query)
        response.raise_for_status()
        data = response.json()

        # Kontrollera att data returneras
        if "data" not in data:
            st.error("Inga data returnerades fr√•n SCB API.")
            return

        # Konvertera data till en DataFrame
        import pandas as pd
        df = pd.DataFrame(data["data"])
        df["value"] = df["values"].apply(lambda x: int(x[0].replace("..", "0")))  # Hantera ".." som 0
        df["id"] = df["key"].apply(lambda x: x[0])  # Extrahera region-ID
        st.write("Debug: Data h√§mtad fr√•n SCB API:")
        st.write(df.head())

        # L√§s in geometridata (testa med op.geojson eller op.json)
        try:
            geo_path = "op.geojson"  # F√∂rsta valet
            geo_df = gpd.read_file(geo_path)
        except FileNotFoundError:
            geo_path = "op.json"  # Andra valet
            geo_df = gpd.read_file(geo_path)

        # Kombinera SCB-data med geometridata
        geo_df = geo_df.merge(df, left_on="id", right_on="id")

        # S√§kerst√§ll att geometrin har r√§tt koordinatsystem
        geo_df = geo_df.to_crs(epsg=4326)

        # Skapa karta med Folium
        karta = folium.Map(location=[57.5, 12.0], zoom_start=10)  # Justera till Kungsbackas koordinater
        folium.Choropleth(
            geo_data=geo_df,
            data=geo_df,
            columns=["id", "value"],  # ID och befolkningst√§thet
            key_on="feature.properties.id",
            fill_color="YlOrRd",
            fill_opacity=0.7,
            line_opacity=0.2,
            legend_name="Befolkning per km¬≤"
        ).add_to(karta)

        # Visa kartan i Streamlit
        st_folium(karta, height=600, width=900)

    except requests.exceptions.RequestException as e:
        st.error(f"Fel vid anrop till SCB:s API: {e}")
    except FileNotFoundError:
        st.error("Filen 'op.geojson' eller 'op.json' kunde inte hittas. Kontrollera att filerna finns i projektmappen.")
    except Exception as e:
        st.error(f"Ett ov√§ntat fel intr√§ffade: {e}")
# ---------------- FUNKTION: visa kollektivtrafikkarta ----------------
def visa_kollektivtrafikkarta(kommun="Kungsbacka"):
    st.subheader("üöå Kollektivtrafik - H√•llplatser")
    st.caption("(Simulerad data - ers√§tt med riktig data fr√•n Trafikverket)")
    
    # Simulerad data f√∂r h√•llplatser
    data = pd.DataFrame({
        'namn': ['Kungsbacka station', 'Hede station', '√Ösa station', 'Fj√§r√•s centrum', 'Onsala centrum'],
        'lat': [57.497, 57.515, 57.350, 57.460, 57.420],
        'lon': [12.075, 12.060, 12.120, 12.170, 12.010]
    })
    
    # Ber√§kna centrum f√∂r kartan
    center_lat = data["lat"].mean()
    center_lon = data["lon"].mean()
    
    folium_map = folium.Map(location=[center_lat, center_lon], zoom_start=11)
    
    # L√§gg till h√•llplatser p√• kartan
    for _, row in data.iterrows():
        folium.Marker(
            location=[row["lat"], row["lon"]],
            popup=row["namn"],
            icon=folium.Icon(color="blue", icon="bus", prefix="fa")
        ).add_to(folium_map)
    
    st_folium(folium_map, height=500)

# ---------------- FUNKTION: Visa cirkeldiagram f√∂r planbesked ----------------
def visa_planbesked_paj(planbesked_df):
    f√∂ljer = planbesked_df["f√∂ljer_op"].sum()
    avviker = len(planbesked_df) - f√∂ljer
    labels = ["F√∂ljer √ñP", "Avviker fr√•n √ñP"]
    values = [f√∂ljer, avviker]
    colors = ["#6ab7a8", "#ff6f69"]

    fig, ax = plt.subplots(figsize=(6, 4))
    wedges, texts = ax.pie(values, colors=colors, startangle=90, radius=1)

    total = sum(values)
    text_props = {"fontsize": 12}

    # L√§gg etiketter till h√∂ger om varje wedge, justerat manuellt
    for i, wedge in enumerate(wedges):
        label = f"{labels[i]} ({values[i]} st, {values[i]/total:.1%})"
        x = 1.2
        y = 0.5 - i * 0.3
        ax.text(x, y, label, ha="left", va="center", **text_props)

    ax.set_aspect("equal")
    st.pyplot(fig)

# ---------------- INTRO ----------------
if val == "Introduktion":
    st.title("Uppf√∂ljning av √∂versiktsplanering f√∂r Kungsbacka kommun")
    st.write("""
H√§r kan du f√∂lja upp indikatorer f√∂r:
- Kommunen som helhet
- Kungsbacka stad
- Utvecklingsorter
    """)
    st.subheader("Strategi 2040")
    
    try:
        bild = Image.open("image.png")
        st.image(bild, caption="Strategi f√∂r Kungsbacka kommun", width=700)
    except:
        st.warning("Bilden 'image.png' kunde inte laddas. Kontrollera att den finns i samma mapp som skriptet.")

# ---------------- KOMMUNNIV√Ö ----------------
elif val == "Kommunniv√• - Planbesked":
    st.title("Kommunniv√• ‚Äì Planbesked")
    st.write("H√§r visas planbesked och huruvida de st√§mmer √∂verens med √ñP:")
    st.markdown("""
    - üü¢ Gr√∂n = i linje med √ñP
    - üî¥ R√∂d = avviker fr√•n √ñP:s strategi
    """)

    planbesked, op = las_in_planbesked_och_op()

    # Kartan i en placeholder s√• layouten blir stabil
    with st.container():
        visa_planbesked_karta(planbesked, op)
    with st.container():
        visa_planbesked_paj(planbesked)

elif val == "Kommunniv√• - F√∂rhandsbesked":
    st.title("Kommunniv√• ‚Äì F√∂rhandsbesked")
    st.write("H√§r kan du analysera inkomna f√∂rhandsbesked och deras relation till √ñP.")
    
    # Exempel p√• inneh√•ll
    st.markdown("üìå *H√§r kan ni t.ex. visa statistik, karta eller lista √∂ver f√∂rhandsbesked.*")

    # TODO: Ers√§tt detta med din riktiga data eller funktion
    st.info("üîß Denna sida √§r under uppbyggnad. Vill du visa karta, tabell eller analys h√§r?")


# ---------------- KOMMUNNIV√Ö ‚Äì BEFOLKNINGSSTATISTIK ----------------
elif val == "Kommunniv√• - Befolkning":
    st.title("Kommunniv√• ‚Äì Befolkningsstatistik")

    # H√§mta data f√∂r befolkningsutveckling
    trend_df = hamta_befolkningstrend()

    if not trend_df.empty and len(trend_df) >= 2:
        senaste_ar = trend_df["√Ör"].max()
        nast_senaste_ar = trend_df["√Ör"].unique()[-2]

        bef_senaste = trend_df[trend_df["√Ör"] == senaste_ar]["Antal"].values[0]
        bef_nast_senaste = trend_df[trend_df["√Ör"] == nast_senaste_ar]["Antal"].values[0]

        tillvaxt = ((bef_senaste - bef_nast_senaste) / bef_nast_senaste) * 100
        skillnad = bef_senaste - bef_nast_senaste

        st.write(f"**üìà Befolkningstillv√§xt:** {tillvaxt:.2f} %")
        if skillnad >= 0:
            st.markdown(f"‚¨ÜÔ∏è {skillnad} personer", unsafe_allow_html=True)
        else:
            st.markdown(f"<span style='color:red;'>‚¨áÔ∏è {skillnad} personer</span>", unsafe_allow_html=True)

        st.write("**üìä Befolkningsutveckling √∂ver tid**")
        visa_befolkningsutveckling(trend_df)

        st.write("**ü•£ √Ölderspyramid & √•ldersf√∂rdelning per geografiskt omr√•de**")

    # H√§mta √•ldersdata och visa √•lderspyramid
    df = hamta_aldersfordelning()
    if df.empty:
        st.error("üö® Ingen data kunde h√§mtas. F√∂rs√∂k igen senare.")
    else:
        if st.button("Visa √•lderspyramid"):
            visa_alderspyramid(df, rubrik="√Ölderspyramid ‚Äì Kungsbacka kommun 2023")

    # V√§lj k√∂n och √•ldersintervall
    k√∂n_val = st.selectbox("V√§lj k√∂n", {"Totalt": ["1", "2"], "Kvinnor": ["2"], "M√§n": ["1"]})
    √•lder_val = st.selectbox("V√§lj √•ldersintervall", [f"{i}-{i+4}" for i in range(0, 100, 5)])
    
    # H√§mta filtrerad befolkningsdata
    antal = hamta_filterad_befolkning(kon=k√∂n_val, alder_intervall=√•lder_val)
    st.metric("Totalt antal i valt urval", f"{antal:,}")
    
    # Visa trenddata om den finns
    trend_df = hamta_befolkningstrend()
    if not trend_df.empty and len(trend_df) >= 2:
        visa_befolkningsutveckling(trend_df)

        st.write("**N√§ringslivstrender**: arbetstillf√§llen, detaljplanerad mark ‚Äì data kan kopplas fr√•n SCB eller kommunen")
elif val == "Kommunniv√• - V√§rmekarta":
    st.title("Kommunniv√• ‚Äì Befolkningst√§thet (1 km-rutor)")
    visa_befolkningstatet_heatmap()

elif val == "Kommunniv√• - Kollektivtrafik":
    st.title("Kommunniv√• ‚Äì Kollektivtrafik")
    visa_kollektivtrafikkarta()

# ---------------- ORTER ----------------
def ort_sida(namn):
    st.title(f"{namn} ‚Äì utveckling och indikatorer")

    inv_data = hamta_invanare_ort()

    # Planbesked
    temarubrik("Planbesked och f√∂rhandsbesked", f√§rg="#f1c40f")
    st.write("- Hur f√∂rh√•ller det sig till √ñP?")
    st.write("- Byggs det mer i prioriterade orter?")
    # ‚ûï H√§r kan du l√§gga in karta eller analysdata om du har ortspecifik planbesked-info

    # Befolkning
    temarubrik("Befolkning", f√§rg="#c40000")
    if namn in inv_data:
        st.write(f"- Antal inv√•nare: **{inv_data[namn]:,}**")
    else:
        st.write("- Antal inv√•nare: saknas")
    st.write("- Dag/natt-befolkning")
    df = hamta_aldersfordelning()
    visa_alderspyramid(df, rubrik=f"√Ölderspyramid ‚Äì {namn} (hela kommunen som exempel)")

    # Bebyggelse
    temarubrik("Bebyggelsen", f√§rg="#f5a081")
    st.write("- F√∂rdelning mellan bostadstyper (flerbostadshus, villor, etc)")
    st.write("- T√§thetskarta (n√§r det finns data)")

    # Naturresurser
    temarubrik("Naturresurser", f√§rg="#4ba3a4")
    st.write("- P√•verkan p√• jordbruksmark vid planbesked / byggande")

    # Trafik
    temarubrik("Trafik", f√§rg="#8b6f4a")
    st.write("- Avst√•nd till kollektivtrafik")
    st.write("- Andel som bor inom 400 m eller 1 km")
    visa_kollektivtrafikkarta(namn)  # Simulerad just nu

    # Kommunal service
    temarubrik("Kommunal service", f√§rg="#f248b9")
    st.write("- Hur v√§l fungerar servicen?")
    st.write("- Upplevs som f√∂r lite eller f√∂r mycket")

    # Kultur och fritid
    temarubrik("Kultur och fritid", f√§rg="#5e2ca5")
    st.write("- Finns det i orten?")
    st.write("- Har det √∂kat eller minskat?")


orter = ["Kungsbacka stad", "Anneberg", "√Ösa", "Kullavik", "S√§r√∂", "Vallda", "Onsala", "Fj√§r√•s", "Frilles√•s"]
if val in orter:
    ort_sida(val)
