import streamlit as st
from PIL import Image
import pandas as pd
import folium
from streamlit_folium import st_folium
import matplotlib.pyplot as plt
import requests
from requests.exceptions import RequestException
import json

# ---------------- SIDBAR ----------------
st.set_page_config(page_title="Uppf√∂ljning av √ñP - Kungsbacka", layout="wide")
st.sidebar.title("V√§lj sida")
val = st.sidebar.radio("V√§lj sida", [
    "Introduktion", "Kommunniv√•", "Kungsbacka stad",
    "Anneberg", "√Ösa", "Kullavik", "S√§r√∂", "Vallda", "Onsala", "Fj√§r√•s", "Frilles√•s",
    "R√∂relser och transport"
])

# ---------------- FUNKTION: h√§mta √•ldersf√∂rdelning fr√•n SCB ----------------
def hamta_aldersfordelning():
    url = "https://api.scb.se/OV0104/v1/doris/sv/ssd/BE/BE0101/BE0101A/BefolkningNy"
    payload = {
        "query": [
            {"code": "Region", "selection": {"filter": "item", "values": ["1384"]}},
            {"code": "Kon", "selection": {"filter": "item", "values": ["1", "2"]}},
            {"code": "Alder", "selection": {"filter": "item", "values": [str(i) for i in range(101)] + ["100+"]}},
            {"code": "Tid", "selection": {"filter": "item", "values": ["2023"]}}
        ],
        "response": {"format": "json"}
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        data = response.json()
        rows = data.get("data", [])
        parsed = [
            {"K√∂n": row["key"][1], "√Ölder": row["key"][2], "Antal": int(row["values"][0])}
            for row in rows
        ]
        return pd.DataFrame(parsed)
    except (RequestException, json.JSONDecodeError, KeyError):
        st.warning("Kunde inte h√§mta √•ldersf√∂rdelning just nu fr√•n SCB. F√∂rs√∂k igen senare.")
        return pd.DataFrame(columns=["K√∂n", "√Ölder", "Antal"])

# ---------------- FUNKTION: visa √•lderspyramid ----------------
def visa_alderspyramid(df, rubrik="√Ölderspyramid"):
    if not df.empty:
        df_m = df[df.K√∂n == "1"]
        df_k = df[df.K√∂n == "2"]

        df_m = df_m.set_index("√Ölder")["Antal"] * -1
        df_k = df_k.set_index("√Ölder")["Antal"]

        fig, ax = plt.subplots(figsize=(10, 8))
        df_m.plot(kind="barh", color="skyblue", ax=ax, label="M√§n")
        df_k.plot(kind="barh", color="lightcoral", ax=ax, label="Kvinnor")
        ax.set_title(rubrik)
        ax.set_xlabel("Antal personer")
        ax.legend()
        st.pyplot(fig)
    else:
        st.info("Ingen data att visa just nu.")

# ---------------- INTRO ----------------
if val == "Introduktion":
    st.title("Uppf√∂ljning av √ñversiktsplanen f√∂r Kungsbacka kommun")
    st.write("""
H√§r kan du f√∂lja upp indikatorer f√∂r:
- Kommunen som helhet
- Kungsbacka stad
- Utvecklingsorter
- R√∂relser och transport
    """)
    st.subheader("Strategi 2040")
    bild = Image.open("image.png")
    st.image(bild, caption="Strategi f√∂r Kungsbacka kommun", width=700)

# ---------------- KOMMUN ----------------
elif val == "Kommunniv√•":
    st.title("Kommunniv√• ‚Äì befolkning, demografi och n√§ringsliv")

    st.write("### Planbesked ‚Äì f√∂ljer de √ñP?")
    st.markdown("""
H√§r visas planbesked och huruvida de st√§mmer √∂verens med √ñP:
- üü¢ Gr√∂n = i linje med √ñP
- üî¥ R√∂d = avviker fr√•n √ñP:s strategi
""")

    planbesked = [
        {"namn": "T√∂l√∂ √Ñngar", "koordinat": [57.500, 12.078], "status": "i linje"},
        {"namn": "Idala by", "koordinat": [57.420, 12.280], "status": "avviker"},
    ]

    plan_karta = folium.Map(location=[57.47, 12.1], zoom_start=10)
    for pb in planbesked:
        farg = "green" if pb["status"] == "i linje" else "red"
        folium.Marker(
            location=pb["koordinat"],
            popup=pb["namn"],
            icon=folium.Icon(color=farg)
        ).add_to(plan_karta)
    st_folium(plan_karta, width=700, height=500)
    st.markdown("<hr style='margin-top: 15px; margin-bottom: 10px;'>", unsafe_allow_html=True)

    bef_2022 = 85682
    bef_2023 = 85476
    tillvaxt = ((bef_2023 - bef_2022) / bef_2022) * 100
    skillnad = bef_2023 - bef_2022

    st.write("**üìà Befolkningstillv√§xt**", f"{tillvaxt:.2f} %", delta=f"{skillnad} personer")
    if skillnad >= 0:
        st.markdown(f"‚¨ÜÔ∏è {skillnad} personer", unsafe_allow_html=True)
    else:
        st.markdown(f"<span style='color:red;'>‚¨áÔ∏è {skillnad} personer</span>", unsafe_allow_html=True)

    st.write("**ü•£ √Ölderspyramid & √•ldersf√∂rdelning per geografiskt omr√•de**")
    df = hamta_aldersfordelning()
    visa_alderspyramid(df, rubrik="√Ölderspyramid ‚Äì Kungsbacka kommun 2023")

# ---------------- ORTER ----------------
def ort_sida(namn):
    st.title(f"{namn} ‚Äì utveckling och indikatorer")
    st.write("### Befolkning och struktur")
    st.write("- Antal och andel inv√•nare")
    st.write("- T√§thet")
    st.write("- Dag/natt-befolkning")
    st.write("### Service och livskvalitet")
    st.write("- Kommunal service")
    st.write("- Kultur/idrottsutbud")
    st.write("### Avst√•nd till kollektivtrafik")
    st.write("Kartor och statistik kan kopplas in f√∂r att visa avst√•nd till h√•llplats")
    st.write("### Inflyttning")
    st.write("H√§r visas statistik om inflyttning")
    st.write("### Demografi")
    df = hamta_aldersfordelning()
    visa_alderspyramid(df, rubrik=f"√Ölderspyramid ‚Äì {namn} (hela kommunen som exempel)")

orter = ["Kungsbacka stad", "Anneberg", "√Ösa", "Kullavik", "S√§r√∂", "Vallda", "Onsala", "Fj√§r√•s", "Frilles√•s"]
if val in orter:
    ort_sida(val)

# ---------------- TRANSPORT ----------------
elif val == "R√∂relser och transport":
    st.title("R√∂relser och transport")
    st.write("### Avst√•nd till kollektivtrafik")
    st.markdown("""
- 90 % av befolkningen b√∂r ha en h√•llplats inom **1 km**  
- 50 % b√∂r ha en h√•llplats inom **400 meter**
""")
    st.write("### Turt√§thet f√∂r kollektivtrafik")
    st.markdown("""
- Minst **1 avg√•ng per timme** i l√•gtrafik  
- Minst **30-minuterstrafik** i h√∂gtrafik
""")
    st.write("### Pendlingsm√∂jligheter")
    st.markdown("""
Visualisering av:
- Hur m√•nga som pendlar in/ut
- Medelrestid
- Andel som √•ker kollektivt, cyklar, g√•r, etc.
""")

def testdata_kungsbacka():
    url = "https://api.scb.se/OV0104/v1/doris/sv/ssd/BE/BE0101/BE0101A/BefolkningNy"
    payload = {
        "query": [
            {"code": "Region", "selection": {"filter": "item", "values": ["1384"]}},
            {"code": "Kon", "selection": {"filter": "item", "values": ["1", "2"]}},
            {"code": "Alder", "selection": {"filter": "item", "values": ["20", "30", "40"]}},
            {"code": "Tid", "selection": {"filter": "item", "values": ["2023"]}}
        ],
        "response": {"format": "json"}
    }
    response = requests.post(url, json=payload)
    return response.json()
