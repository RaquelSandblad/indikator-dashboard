"""
Kolada - Kommun- och landstingsdatabasen
Visar nyckeltal och KPI:er fr√•n Kolada f√∂r kommunj√§mf√∂relser
"""

import streamlit as st
import sys
import os
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd

# L√§gg till root directory till path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import av Kolada connector
from data.kolada_connector import kolada

st.set_page_config(
    page_title="Kolada - Kungsbacka",
    page_icon="üìà",
    layout="wide"
)

# CSS f√∂r st√∂rre ikoner och text i metrics
st.markdown("""
<style>
    /* St√∂rre ikoner och text i metric cards */
    [data-testid="stMetricValue"] {
        font-size: 2.5rem !important;
        font-weight: 600;
    }
    [data-testid="stMetricLabel"] {
        font-size: 1.2rem !important;
        font-weight: 500;
    }
    [data-testid="stMetricDelta"] {
        font-size: 1.1rem !important;
    }
</style>
""", unsafe_allow_html=True)

st.title("üìà Kolada - Kommunala Nyckeltal")
st.markdown("Aktuella nyckeltal och KPI:er f√∂r Kungsbacka kommun fr√•n Kolada-databasen")

# API Status i toppen
col_status1, col_status2 = st.columns([3, 1])
with col_status1:
    st.info("üìä **Live-data fr√•n Kolada API** - Uppdateras automatiskt varje vecka")
with col_status2:
    try:
        # Testa API-anslutning
        test_data = kolada.get_latest_value("N01951")  # Folkm√§ngd
        if test_data:
            st.success("‚úÖ API Aktiv")
        else:
            st.warning("‚ö†Ô∏è Ingen data")
    except:
        st.error("‚ùå API-fel")

st.markdown("---")

# === NYCKELTAL √ñVERSIKT ===
st.subheader("üìä Viktiga nyckeltal f√∂r Kungsbacka")

# Rad 1: Befolkning och demografi
col1, col2, col3, col4 = st.columns(4)

with col1:
    try:
        data = kolada.get_latest_value("N01951")  # Folkm√§ngd
        if data:
            st.metric(
                "üë• Folkm√§ngd",
                f"{int(data['v√§rde']):,}".replace(',', ' '),
                help=f"Antal inv√•nare 31 december ({data['√•r']})"
            )
        else:
            st.metric("üë• Folkm√§ngd", "Data saknas")
    except Exception as e:
        st.metric("üë• Folkm√§ngd", "Laddningsfel")

with col2:
    try:
        data = kolada.get_latest_value("N00945")  # Bygglov
        if data:
            st.metric(
                "üìã Beviljade bygglov",
                f"{int(data['v√§rde'])} st",
                help=f"Antal beviljade bygglov f√∂r bost√§der ({data['√•r']})"
            )
        else:
            st.metric("üìã Beviljade bygglov", "Data saknas")
    except Exception as e:
        st.metric("üìã Beviljade bygglov", "Laddningsfel")

with col3:
    try:
        data = kolada.get_latest_value("N07925")  # Antagna detaljplaner
        if data:
            st.metric(
                "‚úÖ Antagna detaljplaner",
                f"{data['v√§rde']:.1f}",
                help=f"Antal detaljplaner som antagits ({data['√•r']})"
            )
        else:
            st.metric("‚úÖ Antagna detaljplaner", "Data saknas")
    except:
        st.metric("‚úÖ Antagna detaljplaner", "Data saknas")

with col4:
    try:
        data = kolada.get_latest_value("N07924")  # P√•g√•ende detaljplaner
        if data:
            st.metric(
                "üîÑ P√•g√•ende detaljplaner",
                f"{data['v√§rde']:.1f}",
                help=f"Antal p√•g√•ende detaljplaner ({data['√•r']})"
            )
        else:
            st.metric("üîÑ P√•g√•ende detaljplaner", "Data saknas")
    except:
        st.metric("üîÑ P√•g√•ende detaljplaner", "Data saknas")

# Rad 2: H√•llbarhet och tillv√§xt
st.markdown("###")
col1, col2, col3, col4 = st.columns(4)

with col1:
    try:
        data = kolada.get_latest_value("N00974")  # H√•llbart resande
        if data:
            st.metric(
                "üö¥ H√•llbart resande",
                f"{data['v√§rde']:.1f}%",
                help=f"Andel som reser h√•llbart till arbete ({data['√•r']})"
            )
        else:
            st.metric("üö¥ H√•llbart resande", "Data saknas")
    except:
        st.metric("üö¥ H√•llbart resande", "Data saknas")

with col2:
    try:
        data = kolada.get_latest_value("N00956")  # Avst√•nd till h√•llplats
        if data:
            st.metric(
                "üöè N√§ra kollektivtrafik",
                f"{data['v√§rde']:.1f}%",
                help=f"Andel inom g√•ng-/cykelavst√•nd till h√•llplats ({data['√•r']})"
            )
        else:
            st.metric("üöè N√§ra kollektivtrafik", "Data saknas")
    except:
        st.metric("üöè N√§ra kollektivtrafik", "Data saknas")

with col3:
    try:
        # Ber√§kna befolkningstillv√§xt fr√•n trenddata
        trend = kolada.get_trend_data("N01951", years=2)
        if not trend.empty and len(trend) >= 2:
            aktuell = trend.iloc[-1]['v√§rde']
            f√∂rra = trend.iloc[-2]['v√§rde']
            tillvaxt = ((aktuell - f√∂rra) / f√∂rra) * 100
            
            st.metric(
                "üìà Befolkningstillv√§xt",
                f"{tillvaxt:+.2f}%",
                delta=f"Senaste √•ret",
                help=f"F√∂r√§ndring {trend.iloc[-2]['√•r']} ‚Üí {trend.iloc[-1]['√•r']}"
            )
        else:
            st.metric("üìà Befolkningstillv√§xt", "Data saknas")
    except:
        st.metric("üìà Befolkningstillv√§xt", "Ber√§kningsfel")

with col4:
    try:
        # Ber√§kna planaktivitet (antagna + p√•g√•ende)
        antagna = kolada.get_latest_value("N07925")
        pagaende = kolada.get_latest_value("N07924")
        
        if antagna and pagaende:
            totalt = antagna['v√§rde'] + pagaende['v√§rde']
            st.metric(
                "üìã Total planaktivitet",
                f"{totalt:.1f}",
                help=f"Antagna + p√•g√•ende detaljplaner ({antagna['√•r']})"
            )
        else:
            st.metric("üìã Planaktivitet", "Data saknas")
    except:
        st.metric("üìã Planaktivitet", "Ber√§kningsfel")

st.markdown("---")

# === TRENDANALYS ===
st.subheader("ÔøΩ Trendanalys - Befolkningsutveckling")

try:
    trend_data = kolada.get_trend_data("N01951", years=10)  # Folkm√§ngd senaste 10 √•ren
    
    if not trend_data.empty:
        fig = px.line(
            trend_data,
            x='√•r',
            y='v√§rde',
            title='Folkm√§ngd i Kungsbacka kommun (senaste 10 √•ren)',
            labels={'√•r': '√Ör', 'v√§rde': 'Antal inv√•nare'}
        )
        fig.update_traces(mode='lines+markers', line_color='#1f77b4', marker_size=8)
        fig.update_layout(hovermode='x unified', height=400)
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("‚ö†Ô∏è Ingen trenddata tillg√§nglig f√∂r befolkning")
except Exception as e:
    st.error(f"‚ùå Kunde inte h√§mta trenddata: {e}")

st.markdown("---")

# === BOSTADSBYGGANDE ===
st.subheader("üèòÔ∏è Bostadsbyggande")

col1, col2 = st.columns(2)

with col1:
    try:
        bygglov_data = kolada.get_trend_data("N00945", years=5)  # Bygglov f√∂r bost√§der
        if not bygglov_data.empty:
            fig = go.Figure()
            fig.add_trace(go.Bar(
                x=bygglov_data['√•r'],
                y=bygglov_data['v√§rde'],
                name='Bygglov',
                marker_color='#2ca02c'
            ))
            fig.update_layout(
                title='Antal bygglov f√∂r bost√§der',
                xaxis_title='√Ör',
                yaxis_title='Antal',
                height=350
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Bygglovsdata ej tillg√§nglig")
    except:
        st.warning("‚ö†Ô∏è Kunde inte h√§mta bygglovsdata")

with col2:
    try:
        nybyggda_data = kolada.get_trend_data("N00913", years=5)  # Nybyggda l√§genheter
        if not nybyggda_data.empty:
            fig = go.Figure()
            fig.add_trace(go.Bar(
                x=nybyggda_data['√•r'],
                y=nybyggda_data['v√§rde'],
                name='Nybyggda',
                marker_color='#ff7f0e'
            ))
            fig.update_layout(
                title='Nybyggda l√§genheter',
                xaxis_title='√Ör',
                yaxis_title='Antal',
                height=350
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Nybyggnadsdata ej tillg√§nglig")
    except:
        st.warning("‚ö†Ô∏è Kunde inte h√§mta nybyggnadsdata")

st.markdown("---")

# === KOMMUNJ√ÑMF√ñRELSE ===
st.subheader("üìä Regionala j√§mf√∂relser")

st.markdown("**J√§mf√∂r Kungsbacka med kommuner i Halland och G√∂teborgsregionen**")

# Tabs f√∂r olika j√§mf√∂relser
tab1, tab2 = st.tabs(["Hallands kommuner", "G√∂teborgsregionen (GR)"])

with tab1:
    st.markdown("### J√§mf√∂relse med kommuner i Halland")
    try:
        # H√§mta folkm√§ngd f√∂r Hallands kommuner
        jamforelse_halland = kolada.compare_municipalities(
            "N01951", 
            kommun_koder=list(kolada.HALLAND_KOMMUNER.keys())
        )
        
        if not jamforelse_halland.empty:
            jamforelse_halland_sorted = jamforelse_halland.sort_values('v√§rde', ascending=False)
            
            # Stapeldiagram
            fig = px.bar(
                jamforelse_halland_sorted,
                x='kommun_namn',
                y='v√§rde',
                title=f'Folkm√§ngd - Hallands kommuner ({jamforelse_halland_sorted["√•r"].iloc[0]})',
                labels={'kommun_namn': 'Kommun', 'v√§rde': 'Antal inv√•nare'},
                color='kommun_namn',
                color_discrete_sequence=px.colors.qualitative.Pastel
            )
            
            # Markera Kungsbacka med r√∂d kant
            fig.update_traces(
                marker_line_color=['red' if x == 'Kungsbacka' else 'white' for x in jamforelse_halland_sorted['kommun_namn']],
                marker_line_width=[4 if x == 'Kungsbacka' else 0 for x in jamforelse_halland_sorted['kommun_namn']],
                selector=dict(type='bar')
            )
            
            fig.update_layout(showlegend=False, height=400)
            st.plotly_chart(fig, use_container_width=True)
            
            # Tabell
            st.markdown("**Detaljerad j√§mf√∂relse:**")
            display_df = jamforelse_halland_sorted[['kommun_namn', 'v√§rde', '√•r']].copy()
            display_df.columns = ['Kommun', 'Folkm√§ngd', '√Ör']
            display_df['Folkm√§ngd'] = display_df['Folkm√§ngd'].apply(lambda x: f"{int(x):,}".replace(',', ' '))
            
            # L√§gg till ranking
            display_df.insert(0, 'Placering', range(1, len(display_df) + 1))
            st.dataframe(display_df, use_container_width=True, hide_index=True)
            
            # Hitta Kungsbackas position
            kb_position = jamforelse_halland_sorted.reset_index(drop=True)
            kb_index = kb_position[kb_position['kommun_namn'] == 'Kungsbacka'].index[0]
            st.info(f"üèÖ Kungsbacka √§r **placering {kb_index + 1}** av {len(jamforelse_halland_sorted)} kommuner i Halland")
        else:
            st.warning("‚ö†Ô∏è Ingen data tillg√§nglig f√∂r Halland")
    except Exception as e:
        st.error(f"‚ùå Kunde inte h√§mta data: {e}")

with tab2:
    st.markdown("### J√§mf√∂relse med G√∂teborgsregionen (GR)")
    st.info("""
    **G√∂teborgsregionen omfattar 13 kommuner:** Ale, Alings√•s, G√∂teborg, H√§rryda, Kungsbacka, 
    Kung√§lv, Lerum, Lilla Edet, M√∂lndal, Partille, Stenungsund, Tj√∂rn och √ñcker√∂.
    """)
    
    # Selector f√∂r vilken KPI att j√§mf√∂ra
    kpi_choice = st.selectbox(
        "V√§lj nyckeltal att j√§mf√∂ra:",
        options=[
            ("N01951", "Folkm√§ngd"),
            ("N00913", "Nybyggda l√§genheter"),
            ("N07932", "Bostadsl√§genheter totalt"),
            ("N00945", "Bygglov f√∂r bost√§der")
        ],
        format_func=lambda x: x[1],
        key="gr_kpi"
    )
    
    try:
        # H√§mta data f√∂r valda KPI:n
        jamforelse_gr = kolada.compare_municipalities(
            kpi_choice[0], 
            kommun_koder=list(kolada.GOTEBORGSREGIONEN_KOMMUNER.keys())
        )
        
        if not jamforelse_gr.empty:
            jamforelse_gr_sorted = jamforelse_gr.sort_values('v√§rde', ascending=False)
            
            # Stapeldiagram - visa alla 13 kommuner
            fig = px.bar(
                jamforelse_gr_sorted,
                x='kommun_namn',
                y='v√§rde',
                title=f'{kpi_choice[1]} - GR:s 13 kommuner ({jamforelse_gr_sorted["√•r"].iloc[0]})',
                labels={'kommun_namn': 'Kommun', 'v√§rde': kpi_choice[1]},
                color='kommun_namn',
                color_discrete_sequence=px.colors.qualitative.Set2
            )
            
            # Markera Kungsbacka
            fig.update_traces(
                marker_line_color=['red' if x == 'Kungsbacka' else 'white' for x in jamforelse_gr_sorted['kommun_namn']],
                marker_line_width=[4 if x == 'Kungsbacka' else 0 for x in jamforelse_gr_sorted['kommun_namn']],
                selector=dict(type='bar')
            )
            
            fig.update_layout(showlegend=False, height=450, xaxis_tickangle=-45)
            st.plotly_chart(fig, use_container_width=True)
            
            # Hitta Kungsbackas position
            kb_in_list = jamforelse_gr_sorted[jamforelse_gr_sorted['kommun_namn'] == 'Kungsbacka']
            if not kb_in_list.empty:
                kb_index = jamforelse_gr_sorted.reset_index(drop=True)[jamforelse_gr_sorted.reset_index(drop=True)['kommun_namn'] == 'Kungsbacka'].index[0]
                kb_value = kb_in_list.iloc[0]['v√§rde']
                st.success(f"üéØ Kungsbacka: **Placering {kb_index + 1}** av 13 kommuner i GR med v√§rde: **{int(kb_value):,}".replace(',', ' '))
            
            # Tabell med alla 13 kommuner
            st.markdown("**Detaljerad j√§mf√∂relse:**")
            display_df_all = jamforelse_gr_sorted[['kommun_namn', 'v√§rde', '√•r']].copy()
            display_df_all.columns = ['Kommun', kpi_choice[1], '√Ör']
            display_df_all[kpi_choice[1]] = display_df_all[kpi_choice[1]].apply(lambda x: f"{int(x):,}".replace(',', ' '))
            display_df_all.insert(0, 'Placering', range(1, len(display_df_all) + 1))
            st.dataframe(display_df_all, use_container_width=True, hide_index=True)
        else:
            st.warning("‚ö†Ô∏è Ingen data tillg√§nglig f√∂r G√∂teborgsregionen")
    except Exception as e:
        st.error(f"‚ùå Kunde inte h√§mta data: {e}")

st.markdown("---")

# === INFO OM KOLADA ===
with st.expander("‚ÑπÔ∏è Om Kolada och datak√§llan"):
    st.markdown("""
    ### Om Kolada
    
    **Kolada** (Kommun- och landstingsdatabasen) √§r Sveriges st√∂rsta databas f√∂r kommunal och regional data.
    
    **Datak√§llor:**
    - SCB (Statistiska centralbyr√•n)
    - SKR (Sveriges Kommuner och Regioner)
    - Kommunernas egna rapporteringar
    
    **API-dokumentation:**  
    [https://www.kolada.se/verktyg/api](https://www.kolada.se/verktyg/api)
    
    **Uppdateringsfrekvens:**
    - Data cachas lokalt i 7 dagar
    - Automatisk uppdatering fr√•n API
    - Majoriteten av nyckeltal uppdateras √•rligen
    
    **J√§mf√∂relsekommuner:**
    Kungsbacka j√§mf√∂rs med n√§rliggande och liknande kommuner som Kung√§lv, H√§rryda, Ale, Stenungsund, och Tj√∂rn.
    """)

# ============================================================
# DETALJERADE ANALYSER - FLIKAR
# ============================================================

st.markdown("---")
st.markdown("## üìë Detaljerade analyser")
st.markdown("**Utforska djupare inom varje omr√•de:**")

# Skapa flikar f√∂r detaljerade analyser
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üíº Arbetsmarknad",
    "üéì Utbildning",
    "üë∂üëµ Omsorg & V√§lf√§rd",
    "üå± Milj√∂ & H√•llbarhet",
    "üé≠ Kultur & Fritid"
])

# ==================== FLIK 1: ARBETSMARKNAD ====================
with tab1:
    st.header("üíº Arbetsmarknad")
    st.markdown("**Syssels√§ttning, arbetsl√∂shet och f√∂retagande**")
    
    with st.spinner("H√§mtar arbetsmarknadsdata fr√•n Kolada..."):
        # Senaste v√§rden
        sysselsattning = kolada.get_latest_value("N11800")
        arbetslosa = kolada.get_latest_value("N01720")
        nystartade = kolada.get_latest_value("N01004")
        sysselsatta_antal = kolada.get_latest_value("N02201")
        
        # Trenddata
        syss_trend = kolada.get_sysselsattning(years=10)
        arblos_trend = kolada.get_arbetsl√∂shet(years=10)
        
        # J√§mf√∂relsedata
        syss_jamfor = kolada.compare_municipalities("N11800")
        arblos_jamfor = kolada.compare_municipalities("N01720")
    
    # Nyckeltal
    st.subheader("üìä Nyckeltal Kungsbacka")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if sysselsattning:
            st.metric(
                "F√∂rv√§rvsarbetande 20-64 √•r",
                f"{sysselsattning['v√§rde']:.1f}%",
                help=f"Data fr√•n {sysselsattning['√•r']}"
            )
    
    with col2:
        if arbetslosa:
            st.metric(
                "Arbetsl√∂sa eller i √•tg√§rd",
                f"{arbetslosa['v√§rde']:.1f}%",
                help=f"Data fr√•n {arbetslosa['√•r']}"
            )
    
    with col3:
        if nystartade:
            st.metric(
                "Nystartade arbetsst√§llen",
                f"{nystartade['v√§rde']:.1f}",
                help=f"Antal per 1000 inv 16-64 √•r ({nystartade['√•r']})"
            )
    
    with col4:
        if sysselsatta_antal:
            st.metric(
                "Sysselsatta totalt",
                f"{int(sysselsatta_antal['v√§rde']):,}",
                help=f"Efter arbetsst√§llets bel√§genhet ({sysselsatta_antal['√•r']})"
            )
    
    # Trender
    st.subheader("üìà Utveckling √∂ver tid")
    
    tab_syss, tab_arblos = st.tabs(["Syssels√§ttning", "Arbetsl√∂shet"])
    
    with tab_syss:
        if not syss_trend.empty:
            fig = px.line(syss_trend, x='√•r', y='v√§rde',
                         title='F√∂rv√§rvsarbetande 20-64 √•r (%)', markers=True)
            fig.update_layout(xaxis_title="√Ör", yaxis_title="Andel (%)", hovermode='x unified')
            fig.update_traces(line_color='#2E86AB', marker=dict(size=8))
            st.plotly_chart(fig, use_container_width=True)
            
            if len(syss_trend) >= 2:
                forsta = syss_trend.iloc[0]['v√§rde']
                senaste = syss_trend.iloc[-1]['v√§rde']
                forandring = senaste - forsta
                st.info(f"üìä **F√∂r√§ndring:** {forsta:.1f}% ({syss_trend.iloc[0]['√•r']}) ‚Üí {senaste:.1f}% ({syss_trend.iloc[-1]['√•r']}) = **{forandring:+.1f}%-enheter**")
    
    with tab_arblos:
        if not arblos_trend.empty:
            fig = px.line(arblos_trend, x='√•r', y='v√§rde',
                         title='Arbetsl√∂sa eller i √•tg√§rd 16-64 √•r (%)', markers=True)
            fig.update_layout(xaxis_title="√Ör", yaxis_title="Andel (%)", hovermode='x unified')
            fig.update_traces(line_color='#E63946', marker=dict(size=8))
            st.plotly_chart(fig, use_container_width=True)
            
            if len(arblos_trend) >= 2:
                forsta = arblos_trend.iloc[0]['v√§rde']
                senaste = arblos_trend.iloc[-1]['v√§rde']
                forandring = senaste - forsta
                emoji = "üü¢" if forandring < 0 else "üî¥"
                st.info(f"{emoji} **F√∂r√§ndring:** {forsta:.1f}% ({arblos_trend.iloc[0]['√•r']}) ‚Üí {senaste:.1f}% ({arblos_trend.iloc[-1]['√•r']}) = **{forandring:+.1f}%-enheter**")
    
    # J√§mf√∂relser
    st.subheader("üîÑ J√§mf√∂relse med andra kommuner")
    
    if not syss_jamfor.empty:
        syss_jamfor_sorted = syss_jamfor.sort_values('v√§rde', ascending=False)
        colors = ['#2E86AB' if x == 'Kungsbacka' else '#A8DADC' for x in syss_jamfor_sorted['kommun_namn']]
        
        fig = go.Figure(data=[go.Bar(
            x=syss_jamfor_sorted['kommun_namn'], y=syss_jamfor_sorted['v√§rde'],
            marker_color=colors, text=syss_jamfor_sorted['v√§rde'].round(1), textposition='outside'
        )])
        fig.update_layout(
            title=f"F√∂rv√§rvsarbetande 20-64 √•r ({syss_jamfor_sorted['√•r'].iloc[0]})",
            xaxis_title="Kommun", yaxis_title="Andel (%)", showlegend=False
        )
        st.plotly_chart(fig, use_container_width=True)

# ==================== FLIK 2: UTBILDNING ====================
with tab2:
    st.header("üéì Utbildning & Skola")
    st.markdown("**Skolresultat, gymnasieexamen och utbildningskvalitet**")
    
    with st.spinner("H√§mtar utbildningsdata fr√•n Kolada..."):
        meritvarde = kolada.get_latest_value("N15413")
        behoriga_yrke = kolada.get_latest_value("N15446")
        behoriga_estet = kolada.get_latest_value("N15447")
        examen_3ar = kolada.get_latest_value("N15533")
        examen_4ar = kolada.get_latest_value("N15427")
        matematik_ak6 = kolada.get_latest_value("N18216")
        svenska_ak6 = kolada.get_latest_value("N18605")
        
        merit_trend = kolada.get_skolresultat_ak9(years=10)
        examen_trend = kolada.get_gymnasie_examen(years=10)
        merit_jamfor = kolada.compare_municipalities("N15413")
    
    # Grundskola
    st.subheader("üìö Grundskola - √Örskurs 9")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if meritvarde:
            st.metric("Genomsnittligt meritv√§rde", f"{meritvarde['v√§rde']:.1f}",
                     help=f"Elever i √•k 9 ({meritvarde['√•r']})")
    
    with col2:
        if behoriga_yrke:
            st.metric("Beh√∂riga till yrkesprogram", f"{behoriga_yrke['v√§rde']:.1f}%",
                     help=f"Andel elever ({behoriga_yrke['√•r']})")
    
    with col3:
        if behoriga_estet:
            st.metric("Beh√∂riga till estetiska pgm", f"{behoriga_estet['v√§rde']:.1f}%",
                     help=f"Andel elever ({behoriga_estet['√•r']})")
    
    # Gymnasium
    st.subheader("üéì Gymnasieskola")
    col4, col5 = st.columns(2)
    
    with col4:
        if examen_3ar:
            st.metric("Examen inom 3 √•r", f"{examen_3ar['v√§rde']:.1f}%",
                     help=f"Gymnasieelever ({examen_3ar['√•r']})")
    
    with col5:
        if examen_4ar:
            st.metric("Examen inom 4 √•r", f"{examen_4ar['v√§rde']:.1f}%",
                     help=f"Gymnasieelever ({examen_4ar['√•r']})")
    
    # L√•gstadiet
    st.subheader("üìñ L√•gstadiet - √Örskurs 6")
    col6, col7 = st.columns(2)
    
    with col6:
        if matematik_ak6:
            st.metric("Matematik - Minst E", f"{matematik_ak6['v√§rde']:.1f}%",
                     help=f"√Ök 6 ({matematik_ak6['√•r']})")
    
    with col7:
        if svenska_ak6:
            st.metric("Svenska - Minst E", f"{svenska_ak6['v√§rde']:.1f}%",
                     help=f"√Ök 6 ({svenska_ak6['√•r']})")
    
    # Trend
    st.subheader("üìà Utveckling meritv√§rde √•k 9")
    if not merit_trend.empty:
        fig = px.line(merit_trend, x='√•r', y='v√§rde', markers=True)
        fig.update_layout(xaxis_title="√Ör", yaxis_title="Meritv√§rde", hovermode='x unified')
        fig.update_traces(line_color='#457B9D', marker=dict(size=8))
        st.plotly_chart(fig, use_container_width=True)

# ==================== FLIK 3: OMSORG & V√ÑLF√ÑRD ====================
with tab3:
    st.header("üë∂üëµ Omsorg & V√§lf√§rd")
    st.markdown("**Barnomsorg, f√∂rskola och √§ldreomsorg**")
    
    with st.spinner("H√§mtar omsorgsdata fr√•n Kolada..."):
        barn_forskola = kolada.get_latest_value("N15011")
        forskola_fungerar = kolada.get_latest_value("N00530")
        kostnad_forskola = kolada.get_latest_value("N03201")
        aldre_65 = kolada.get_latest_value("N00204")
        aldre_80 = kolada.get_latest_value("N00205")
        hemtjanst_65 = kolada.get_latest_value("N00911")
        sarskilt_65 = kolada.get_latest_value("N00910")
        hemtjanst_80 = kolada.get_latest_value("N00909")
        sarskilt_80 = kolada.get_latest_value("N00908")
        
        barn_trend = kolada.get_forskola_andel(years=10)
        hemtjanst_trend = kolada.get_aldreomsorg_hemtjanst(years=10)
    
    # Barnomsorg
    st.subheader("üë∂ Barnomsorg & F√∂rskola")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if barn_forskola:
            st.metric("Barn 1-5 √•r i f√∂rskola", f"{barn_forskola['v√§rde']:.1f}%",
                     help=f"Andel ({barn_forskola['√•r']})")
    
    with col2:
        if forskola_fungerar:
            st.metric("F√∂rskolan fungerar bra", f"{forskola_fungerar['v√§rde']:.1f}%",
                     help=f"Medborgarunders√∂kning ({forskola_fungerar['√•r']})")
    
    with col3:
        if kostnad_forskola:
            st.metric("Kostnad f√∂rskola", f"{kostnad_forskola['v√§rde']:,.0f} kr/inv",
                     help=f"Kr per inv 1-5 √•r ({kostnad_forskola['√•r']})")
    
    # √Ñldreomsorg
    st.subheader("üëµ √Ñldreomsorg")
    col4, col5 = st.columns(2)
    
    with col4:
        if aldre_65:
            st.metric("Inv√•nare 65+ √•r", f"{int(aldre_65['v√§rde']):,}",
                     help=f"Antal ({aldre_65['√•r']})")
    
    with col5:
        if aldre_80:
            st.metric("Inv√•nare 80+ √•r", f"{int(aldre_80['v√§rde']):,}",
                     help=f"Antal ({aldre_80['√•r']})")
    
    st.subheader("üìä Omsorgsniv√•er")
    col6, col7, col8, col9 = st.columns(4)
    
    with col6:
        if hemtjanst_65:
            st.metric("Hemtj√§nst 65+", f"{hemtjanst_65['v√§rde']:.1f}%",
                     help=f"Andel ({hemtjanst_65['√•r']})")
    
    with col7:
        if sarskilt_65:
            st.metric("S√§rskilt boende 65+", f"{sarskilt_65['v√§rde']:.1f}%",
                     help=f"Andel ({sarskilt_65['√•r']})")
    
    with col8:
        if hemtjanst_80:
            st.metric("Hemtj√§nst 80+", f"{hemtjanst_80['v√§rde']:.1f}%",
                     help=f"Andel ({hemtjanst_80['√•r']})")
    
    with col9:
        if sarskilt_80:
            st.metric("S√§rskilt boende 80+", f"{sarskilt_80['v√§rde']:.1f}%",
                     help=f"Andel ({sarskilt_80['√•r']})")
    
    # Trend
    if not hemtjanst_trend.empty:
        st.subheader("üìà Utveckling hemtj√§nst 65+")
        fig = px.line(hemtjanst_trend, x='√•r', y='v√§rde', markers=True)
        fig.update_layout(xaxis_title="√Ör", yaxis_title="Andel (%)", hovermode='x unified')
        fig.update_traces(line_color='#06A77D', marker=dict(size=8))
        st.plotly_chart(fig, use_container_width=True)

# ==================== FLIK 4: MILJ√ñ & H√ÖLLBARHET ====================
with tab4:
    st.header("üå± Milj√∂ & H√•llbarhet")
    st.markdown("**Utsl√§pp, √•tervinning och h√•llbart resande**")
    
    with st.spinner("H√§mtar milj√∂data fr√•n Kolada..."):
        miljoindex = kolada.get_latest_value("N00302")
        hallbarhet_index = kolada.get_latest_value("N00371")
        hallbart_resande = kolada.get_latest_value("N00974")
        atervinning = kolada.get_latest_value("N17425")
        vaxthusgas = kolada.get_latest_value("N00304")
        vaxthusgas_transport = kolada.get_latest_value("N00305")
        fornybar = kolada.get_latest_value("N07951")
        
        hallbart_trend = kolada.get_hallbart_resande(years=10)
        vaxthusgas_trend = kolada.get_vaxthusgas(years=10)
        atervinning_trend = kolada.get_atervinning(years=10)
    
    # Milj√∂indikatorer
    st.subheader("üìä Milj√∂indikatorer")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if miljoindex:
            st.metric("Milj√∂kvalitet", f"{miljoindex['v√§rde']:.1f}",
                     help=f"Kommunindex ({miljoindex['√•r']})")
    
    with col2:
        if hallbarhet_index:
            st.metric("Milj√∂m√§ssig h√•llbarhet", f"{hallbarhet_index['v√§rde']:.1f}",
                     help=f"Kommunindex ({hallbarhet_index['√•r']})")
    
    with col3:
        if hallbart_resande:
            st.metric("H√•llbart resande", f"{hallbart_resande['v√§rde']:.1f}%",
                     help=f"Till arbetsplatsen ({hallbart_resande['√•r']})")
    
    with col4:
        if atervinning:
            st.metric("√Ötervinning", f"{atervinning['v√§rde']:.1f}%",
                     help=f"Hush√•llsavfall ({atervinning['√•r']})")
    
    # Utsl√§pp
    st.subheader("üí® Utsl√§pp v√§xthusgaser")
    col5, col6, col7 = st.columns(3)
    
    with col5:
        if vaxthusgas:
            st.metric("Totala utsl√§pp", f"{vaxthusgas['v√§rde']:.2f}",
                     help=f"Ton CO‚ÇÇ-ekv/inv ({vaxthusgas['√•r']})")
    
    with col6:
        if vaxthusgas_transport:
            st.metric("Utsl√§pp transporter", f"{vaxthusgas_transport['v√§rde']:.2f}",
                     help=f"Ton CO‚ÇÇ-ekv/inv ({vaxthusgas_transport['√•r']})")
    
    with col7:
        if vaxthusgas and vaxthusgas_transport:
            andel = (vaxthusgas_transport['v√§rde'] / vaxthusgas['v√§rde']) * 100
            st.metric("Andel fr√•n transporter", f"{andel:.1f}%",
                     help="Transporternas andel av totala utsl√§pp")
    
    # Trender
    st.subheader("üìà Utveckling √∂ver tid")
    
    tab_hallbart, tab_utslapp, tab_ater = st.tabs(["H√•llbart resande", "V√§xthusgaser", "√Ötervinning"])
    
    with tab_hallbart:
        if not hallbart_trend.empty:
            fig = px.line(hallbart_trend, x='√•r', y='v√§rde', markers=True,
                         title='Andel som reser h√•llbart till arbetsplatsen (%)')
            fig.update_layout(xaxis_title="√Ör", yaxis_title="Andel (%)", hovermode='x unified')
            fig.update_traces(line_color='#38b000', marker=dict(size=8))
            st.plotly_chart(fig, use_container_width=True)
    
    with tab_utslapp:
        if not vaxthusgas_trend.empty:
            fig = px.line(vaxthusgas_trend, x='√•r', y='v√§rde', markers=True,
                         title='Utsl√§pp v√§xthusgaser totalt (ton CO‚ÇÇ-ekv/inv)')
            fig.update_layout(xaxis_title="√Ör", yaxis_title="Ton CO‚ÇÇ-ekv/inv", hovermode='x unified')
            fig.update_traces(line_color='#dc2f02', marker=dict(size=8))
            st.plotly_chart(fig, use_container_width=True)
    
    with tab_ater:
        if not atervinning_trend.empty:
            fig = px.line(atervinning_trend, x='√•r', y='v√§rde', markers=True,
                         title='Andel hush√•llsavfall som √•tervinns (%)')
            fig.update_layout(xaxis_title="√Ör", yaxis_title="Andel (%)", hovermode='x unified')
            fig.update_traces(line_color='#588157', marker=dict(size=8))
            st.plotly_chart(fig, use_container_width=True)

# ==================== FLIK 5: KULTUR & FRITID ====================
with tab5:
    st.header("üé≠ Kultur & Fritid")
    st.markdown("**Bibliotek, kulturaktiviteter och fritidsverksamhet**")
    
    with st.spinner("H√§mtar kultur- och fritidsdata fr√•n Kolada..."):
        kultur_nojeslivs = kolada.get_latest_value("N00593")
        kultur_framja = kolada.get_latest_value("N00594")
        bibliotek_besok = kolada.get_latest_value("N11801")
        bibliotek_lan = kolada.get_latest_value("N11929")
        fritid_barn = kolada.get_latest_value("N00595")
        idrott_anlaggning = kolada.get_latest_value("N00596")
        kostnad_musikskola = kolada.get_latest_value("N09001")
        kostnad_kultur = kolada.get_latest_value("N09007")
        
        besok_trend = kolada.get_biblioteksbesok(years=10)
        lan_trend = kolada.get_bibliotekslan(years=10)
    
    # Medborgarupplevelse
    st.subheader("üó£Ô∏è Medborgarnas upplevelse")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if kultur_nojeslivs:
            st.metric("Kultur & n√∂jesliv bra", f"{kultur_nojeslivs['v√§rde']:.1f}%",
                     help=f"Andel ({kultur_nojeslivs['√•r']})")
    
    with col2:
        if kultur_framja:
            st.metric("Kulturarbete bra", f"{kultur_framja['v√§rde']:.1f}%",
                     help=f"Kommunens arbete ({kultur_framja['√•r']})")
    
    with col3:
        if fritid_barn:
            st.metric("Fritid barn & unga", f"{fritid_barn['v√§rde']:.1f}%",
                     help=f"N√∂jdhet ({fritid_barn['√•r']})")
    
    with col4:
        if idrott_anlaggning:
            st.metric("Idrottsanl√§ggningar", f"{idrott_anlaggning['v√§rde']:.1f}%",
                     help=f"N√∂jdhet ({idrott_anlaggning['√•r']})")
    
    # Bibliotek
    st.subheader("üìö Biblioteksverksamhet")
    col5, col6 = st.columns(2)
    
    with col5:
        if bibliotek_besok:
            st.metric("Biblioteksbes√∂k per inv√•nare", f"{bibliotek_besok['v√§rde']:.1f}",
                     help=f"Antal ({bibliotek_besok['√•r']})")
    
    with col6:
        if bibliotek_lan:
            st.metric("Biblioteksl√•n per inv√•nare", f"{bibliotek_lan['v√§rde']:.1f}",
                     help=f"Antal ({bibliotek_lan['√•r']})")
    
    # Trender
    st.subheader("üìà Utveckling √∂ver tid")
    
    tab_besok, tab_lan = st.tabs(["Biblioteksbes√∂k", "Biblioteksl√•n"])
    
    with tab_besok:
        if not besok_trend.empty:
            fig = px.line(besok_trend, x='√•r', y='v√§rde', markers=True,
                         title='Biblioteksbes√∂k per inv√•nare')
            fig.update_layout(xaxis_title="√Ör", yaxis_title="Bes√∂k/inv", hovermode='x unified')
            fig.update_traces(line_color='#6a4c93', marker=dict(size=8))
            st.plotly_chart(fig, use_container_width=True)
    
    with tab_lan:
        if not lan_trend.empty:
            fig = px.line(lan_trend, x='√•r', y='v√§rde', markers=True,
                         title='Biblioteksl√•n per inv√•nare')
            fig.update_layout(xaxis_title="√Ör", yaxis_title="L√•n/inv", hovermode='x unified')
            fig.update_traces(line_color='#1982c4', marker=dict(size=8))
            st.plotly_chart(fig, use_container_width=True)
    
    # Kostnader
    st.subheader("üí∞ Kostnader")
    col7, col8 = st.columns(2)
    
    with col7:
        if kostnad_musikskola:
            st.metric("Musik & kulturskola", f"{kostnad_musikskola['v√§rde']:,.0f} kr/inv",
                     help=f"Per inv 7-15 √•r ({kostnad_musikskola['√•r']})")
    
    with col8:
        if kostnad_kultur:
            st.metric("Allm√§n kulturverksamhet", f"{kostnad_kultur['v√§rde']:,.0f} kr/inv",
                     help=f"Per inv√•nare ({kostnad_kultur['√•r']})")
